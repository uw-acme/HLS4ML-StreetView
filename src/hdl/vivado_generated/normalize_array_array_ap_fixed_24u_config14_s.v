// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module normalize_array_array_ap_fixed_24u_config14_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        data_V_data_10_V_dout,
        data_V_data_10_V_empty_n,
        data_V_data_10_V_read,
        data_V_data_11_V_dout,
        data_V_data_11_V_empty_n,
        data_V_data_11_V_read,
        data_V_data_12_V_dout,
        data_V_data_12_V_empty_n,
        data_V_data_12_V_read,
        data_V_data_13_V_dout,
        data_V_data_13_V_empty_n,
        data_V_data_13_V_read,
        data_V_data_14_V_dout,
        data_V_data_14_V_empty_n,
        data_V_data_14_V_read,
        data_V_data_15_V_dout,
        data_V_data_15_V_empty_n,
        data_V_data_15_V_read,
        data_V_data_16_V_dout,
        data_V_data_16_V_empty_n,
        data_V_data_16_V_read,
        data_V_data_17_V_dout,
        data_V_data_17_V_empty_n,
        data_V_data_17_V_read,
        data_V_data_18_V_dout,
        data_V_data_18_V_empty_n,
        data_V_data_18_V_read,
        data_V_data_19_V_dout,
        data_V_data_19_V_empty_n,
        data_V_data_19_V_read,
        data_V_data_20_V_dout,
        data_V_data_20_V_empty_n,
        data_V_data_20_V_read,
        data_V_data_21_V_dout,
        data_V_data_21_V_empty_n,
        data_V_data_21_V_read,
        data_V_data_22_V_dout,
        data_V_data_22_V_empty_n,
        data_V_data_22_V_read,
        data_V_data_23_V_dout,
        data_V_data_23_V_empty_n,
        data_V_data_23_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write,
        res_V_data_8_V_din,
        res_V_data_8_V_full_n,
        res_V_data_8_V_write,
        res_V_data_9_V_din,
        res_V_data_9_V_full_n,
        res_V_data_9_V_write,
        res_V_data_10_V_din,
        res_V_data_10_V_full_n,
        res_V_data_10_V_write,
        res_V_data_11_V_din,
        res_V_data_11_V_full_n,
        res_V_data_11_V_write,
        res_V_data_12_V_din,
        res_V_data_12_V_full_n,
        res_V_data_12_V_write,
        res_V_data_13_V_din,
        res_V_data_13_V_full_n,
        res_V_data_13_V_write,
        res_V_data_14_V_din,
        res_V_data_14_V_full_n,
        res_V_data_14_V_write,
        res_V_data_15_V_din,
        res_V_data_15_V_full_n,
        res_V_data_15_V_write,
        res_V_data_16_V_din,
        res_V_data_16_V_full_n,
        res_V_data_16_V_write,
        res_V_data_17_V_din,
        res_V_data_17_V_full_n,
        res_V_data_17_V_write,
        res_V_data_18_V_din,
        res_V_data_18_V_full_n,
        res_V_data_18_V_write,
        res_V_data_19_V_din,
        res_V_data_19_V_full_n,
        res_V_data_19_V_write,
        res_V_data_20_V_din,
        res_V_data_20_V_full_n,
        res_V_data_20_V_write,
        res_V_data_21_V_din,
        res_V_data_21_V_full_n,
        res_V_data_21_V_write,
        res_V_data_22_V_din,
        res_V_data_22_V_full_n,
        res_V_data_22_V_write,
        res_V_data_23_V_din,
        res_V_data_23_V_full_n,
        res_V_data_23_V_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [15:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [15:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [15:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [15:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [15:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [15:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
input  [15:0] data_V_data_10_V_dout;
input   data_V_data_10_V_empty_n;
output   data_V_data_10_V_read;
input  [15:0] data_V_data_11_V_dout;
input   data_V_data_11_V_empty_n;
output   data_V_data_11_V_read;
input  [15:0] data_V_data_12_V_dout;
input   data_V_data_12_V_empty_n;
output   data_V_data_12_V_read;
input  [15:0] data_V_data_13_V_dout;
input   data_V_data_13_V_empty_n;
output   data_V_data_13_V_read;
input  [15:0] data_V_data_14_V_dout;
input   data_V_data_14_V_empty_n;
output   data_V_data_14_V_read;
input  [15:0] data_V_data_15_V_dout;
input   data_V_data_15_V_empty_n;
output   data_V_data_15_V_read;
input  [15:0] data_V_data_16_V_dout;
input   data_V_data_16_V_empty_n;
output   data_V_data_16_V_read;
input  [15:0] data_V_data_17_V_dout;
input   data_V_data_17_V_empty_n;
output   data_V_data_17_V_read;
input  [15:0] data_V_data_18_V_dout;
input   data_V_data_18_V_empty_n;
output   data_V_data_18_V_read;
input  [15:0] data_V_data_19_V_dout;
input   data_V_data_19_V_empty_n;
output   data_V_data_19_V_read;
input  [15:0] data_V_data_20_V_dout;
input   data_V_data_20_V_empty_n;
output   data_V_data_20_V_read;
input  [15:0] data_V_data_21_V_dout;
input   data_V_data_21_V_empty_n;
output   data_V_data_21_V_read;
input  [15:0] data_V_data_22_V_dout;
input   data_V_data_22_V_empty_n;
output   data_V_data_22_V_read;
input  [15:0] data_V_data_23_V_dout;
input   data_V_data_23_V_empty_n;
output   data_V_data_23_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [15:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [15:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [15:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [15:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;
output  [15:0] res_V_data_8_V_din;
input   res_V_data_8_V_full_n;
output   res_V_data_8_V_write;
output  [15:0] res_V_data_9_V_din;
input   res_V_data_9_V_full_n;
output   res_V_data_9_V_write;
output  [15:0] res_V_data_10_V_din;
input   res_V_data_10_V_full_n;
output   res_V_data_10_V_write;
output  [15:0] res_V_data_11_V_din;
input   res_V_data_11_V_full_n;
output   res_V_data_11_V_write;
output  [15:0] res_V_data_12_V_din;
input   res_V_data_12_V_full_n;
output   res_V_data_12_V_write;
output  [15:0] res_V_data_13_V_din;
input   res_V_data_13_V_full_n;
output   res_V_data_13_V_write;
output  [15:0] res_V_data_14_V_din;
input   res_V_data_14_V_full_n;
output   res_V_data_14_V_write;
output  [15:0] res_V_data_15_V_din;
input   res_V_data_15_V_full_n;
output   res_V_data_15_V_write;
output  [15:0] res_V_data_16_V_din;
input   res_V_data_16_V_full_n;
output   res_V_data_16_V_write;
output  [15:0] res_V_data_17_V_din;
input   res_V_data_17_V_full_n;
output   res_V_data_17_V_write;
output  [15:0] res_V_data_18_V_din;
input   res_V_data_18_V_full_n;
output   res_V_data_18_V_write;
output  [15:0] res_V_data_19_V_din;
input   res_V_data_19_V_full_n;
output   res_V_data_19_V_write;
output  [15:0] res_V_data_20_V_din;
input   res_V_data_20_V_full_n;
output   res_V_data_20_V_write;
output  [15:0] res_V_data_21_V_din;
input   res_V_data_21_V_full_n;
output   res_V_data_21_V_write;
output  [15:0] res_V_data_22_V_din;
input   res_V_data_22_V_full_n;
output   res_V_data_22_V_write;
output  [15:0] res_V_data_23_V_din;
input   res_V_data_23_V_full_n;
output   res_V_data_23_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg data_V_data_10_V_read;
reg data_V_data_11_V_read;
reg data_V_data_12_V_read;
reg data_V_data_13_V_read;
reg data_V_data_14_V_read;
reg data_V_data_15_V_read;
reg data_V_data_16_V_read;
reg data_V_data_17_V_read;
reg data_V_data_18_V_read;
reg data_V_data_19_V_read;
reg data_V_data_20_V_read;
reg data_V_data_21_V_read;
reg data_V_data_22_V_read;
reg data_V_data_23_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;
reg res_V_data_8_V_write;
reg res_V_data_9_V_write;
reg res_V_data_10_V_write;
reg res_V_data_11_V_write;
reg res_V_data_12_V_write;
reg res_V_data_13_V_write;
reg res_V_data_14_V_write;
reg res_V_data_15_V_write;
reg res_V_data_16_V_write;
reg res_V_data_17_V_write;
reg res_V_data_18_V_write;
reg res_V_data_19_V_write;
reg res_V_data_20_V_write;
reg res_V_data_21_V_write;
reg res_V_data_22_V_write;
reg res_V_data_23_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_state3;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    data_V_data_8_V_blk_n;
reg    data_V_data_9_V_blk_n;
reg    data_V_data_10_V_blk_n;
reg    data_V_data_11_V_blk_n;
reg    data_V_data_12_V_blk_n;
reg    data_V_data_13_V_blk_n;
reg    data_V_data_14_V_blk_n;
reg    data_V_data_15_V_blk_n;
reg    data_V_data_16_V_blk_n;
reg    data_V_data_17_V_blk_n;
reg    data_V_data_18_V_blk_n;
reg    data_V_data_19_V_blk_n;
reg    data_V_data_20_V_blk_n;
reg    data_V_data_21_V_blk_n;
reg    data_V_data_22_V_blk_n;
reg    data_V_data_23_V_blk_n;
reg    res_V_data_0_V_blk_n;
wire    ap_CS_fsm_state5;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg    res_V_data_6_V_blk_n;
reg    res_V_data_7_V_blk_n;
reg    res_V_data_8_V_blk_n;
reg    res_V_data_9_V_blk_n;
reg    res_V_data_10_V_blk_n;
reg    res_V_data_11_V_blk_n;
reg    res_V_data_12_V_blk_n;
reg    res_V_data_13_V_blk_n;
reg    res_V_data_14_V_blk_n;
reg    res_V_data_15_V_blk_n;
reg    res_V_data_16_V_blk_n;
reg    res_V_data_17_V_blk_n;
reg    res_V_data_18_V_blk_n;
reg    res_V_data_19_V_blk_n;
reg    res_V_data_20_V_blk_n;
reg    res_V_data_21_V_blk_n;
reg    res_V_data_22_V_blk_n;
reg    res_V_data_23_V_blk_n;
wire   [4:0] i_fu_3460_p2;
reg   [4:0] i_reg_4045;
wire    ap_CS_fsm_state2;
reg   [15:0] tmp_data_V_0_reg_4050;
wire    io_acc_block_signal_op62;
reg   [15:0] tmp_data_V_1_reg_4055;
reg   [15:0] tmp_data_V_2_reg_4060;
reg   [15:0] tmp_data_V_3_reg_4065;
reg   [15:0] tmp_data_V_4_reg_4070;
reg   [15:0] tmp_data_V_5_reg_4075;
reg   [15:0] tmp_data_V_6_reg_4080;
reg   [15:0] tmp_data_V_7_reg_4085;
reg   [15:0] tmp_data_V_8_reg_4090;
reg   [15:0] tmp_data_V_9_reg_4095;
reg   [15:0] tmp_data_V_10_reg_4100;
reg   [15:0] tmp_data_V_11_reg_4105;
reg   [15:0] tmp_data_V_1230_reg_4110;
reg   [15:0] tmp_data_V_13_reg_4115;
reg   [15:0] tmp_data_V_14_reg_4120;
reg   [15:0] tmp_data_V_15_reg_4125;
reg   [15:0] tmp_data_V_16_reg_4130;
reg   [15:0] tmp_data_V_17_reg_4135;
reg   [15:0] tmp_data_V_18_reg_4140;
reg   [15:0] tmp_data_V_19_reg_4145;
reg   [15:0] tmp_data_V_20_reg_4150;
reg   [15:0] tmp_data_V_21_reg_4155;
reg   [15:0] tmp_data_V_22_reg_4160;
reg   [15:0] tmp_data_V_23_reg_4165;
reg   [15:0] trunc_ln_reg_4170;
wire    ap_CS_fsm_state4;
reg   [15:0] trunc_ln708_s_reg_4175;
reg   [15:0] trunc_ln708_102_reg_4180;
reg   [15:0] trunc_ln708_103_reg_4185;
reg   [15:0] trunc_ln708_104_reg_4190;
reg   [15:0] trunc_ln708_105_reg_4195;
reg   [15:0] trunc_ln708_106_reg_4200;
reg   [15:0] trunc_ln708_107_reg_4205;
reg   [15:0] trunc_ln708_108_reg_4210;
reg   [15:0] trunc_ln708_109_reg_4215;
reg   [15:0] trunc_ln708_110_reg_4220;
reg   [15:0] trunc_ln708_111_reg_4225;
reg   [15:0] trunc_ln708_112_reg_4230;
reg   [15:0] trunc_ln708_113_reg_4235;
reg   [15:0] trunc_ln708_114_reg_4240;
reg   [15:0] trunc_ln708_115_reg_4245;
reg   [15:0] trunc_ln708_116_reg_4250;
reg   [15:0] trunc_ln708_117_reg_4255;
reg   [15:0] trunc_ln708_118_reg_4260;
reg   [15:0] trunc_ln708_119_reg_4265;
reg   [15:0] trunc_ln708_120_reg_4270;
reg   [15:0] trunc_ln708_121_reg_4275;
reg   [15:0] trunc_ln708_122_reg_4280;
reg   [15:0] trunc_ln708_123_reg_4285;
reg   [4:0] i_0_reg_946;
reg    ap_block_state1;
wire    io_acc_block_signal_op186;
wire  signed [15:0] mul_ln1118_112_fu_957_p0;
wire  signed [15:0] mul_ln1118_127_fu_958_p0;
wire  signed [15:0] mul_ln1118_122_fu_959_p0;
wire  signed [15:0] mul_ln1118_114_fu_960_p0;
wire  signed [15:0] mul_ln1118_132_fu_961_p0;
wire  signed [15:0] mul_ln1118_133_fu_962_p0;
wire  signed [15:0] mul_ln1118_119_fu_963_p0;
wire  signed [15:0] mul_ln1118_116_fu_964_p0;
wire  signed [15:0] mul_ln1118_126_fu_965_p0;
wire  signed [15:0] mul_ln1118_131_fu_966_p0;
wire  signed [15:0] mul_ln1118_123_fu_967_p0;
wire  signed [15:0] mul_ln1118_115_fu_968_p0;
wire  signed [15:0] mul_ln1118_130_fu_969_p0;
wire  signed [15:0] mul_ln1118_120_fu_970_p0;
wire  signed [15:0] mul_ln1118_117_fu_971_p0;
wire  signed [15:0] mul_ln1118_125_fu_972_p0;
wire  signed [15:0] mul_ln1118_118_fu_973_p0;
wire  signed [15:0] mul_ln1118_128_fu_974_p0;
wire  signed [15:0] mul_ln1118_129_fu_975_p0;
wire  signed [15:0] mul_ln1118_134_fu_976_p0;
wire  signed [15:0] mul_ln1118_121_fu_977_p0;
wire  signed [15:0] mul_ln1118_124_fu_978_p0;
wire  signed [15:0] mul_ln1118_113_fu_979_p0;
wire  signed [15:0] mul_ln1118_fu_980_p0;
wire   [25:0] mul_ln1118_fu_980_p2;
wire   [25:0] mul_ln1118_112_fu_957_p2;
wire   [25:0] mul_ln1118_113_fu_979_p2;
wire   [25:0] mul_ln1118_114_fu_960_p2;
wire   [25:0] mul_ln1118_115_fu_968_p2;
wire   [25:0] mul_ln1118_116_fu_964_p2;
wire   [25:0] mul_ln1118_117_fu_971_p2;
wire   [25:0] mul_ln1118_118_fu_973_p2;
wire   [25:0] mul_ln1118_119_fu_963_p2;
wire   [25:0] mul_ln1118_120_fu_970_p2;
wire   [25:0] mul_ln1118_121_fu_977_p2;
wire   [25:0] mul_ln1118_122_fu_959_p2;
wire   [25:0] mul_ln1118_123_fu_967_p2;
wire   [25:0] mul_ln1118_124_fu_978_p2;
wire   [25:0] mul_ln1118_125_fu_972_p2;
wire   [25:0] mul_ln1118_126_fu_965_p2;
wire   [25:0] mul_ln1118_127_fu_958_p2;
wire   [25:0] mul_ln1118_128_fu_974_p2;
wire   [25:0] mul_ln1118_129_fu_975_p2;
wire   [25:0] mul_ln1118_130_fu_969_p2;
wire   [25:0] mul_ln1118_131_fu_966_p2;
wire   [25:0] mul_ln1118_132_fu_961_p2;
wire   [25:0] mul_ln1118_133_fu_962_p2;
wire   [25:0] mul_ln1118_134_fu_976_p2;
wire   [0:0] icmp_ln48_fu_3454_p2;
wire    ap_CS_fsm_state6;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((io_acc_block_signal_op186 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_0_reg_946 <= i_reg_4045;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_946 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_4045 <= i_fu_3460_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((io_acc_block_signal_op62 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_data_V_0_reg_4050 <= data_V_data_0_V_dout;
        tmp_data_V_10_reg_4100 <= data_V_data_10_V_dout;
        tmp_data_V_11_reg_4105 <= data_V_data_11_V_dout;
        tmp_data_V_1230_reg_4110 <= data_V_data_12_V_dout;
        tmp_data_V_13_reg_4115 <= data_V_data_13_V_dout;
        tmp_data_V_14_reg_4120 <= data_V_data_14_V_dout;
        tmp_data_V_15_reg_4125 <= data_V_data_15_V_dout;
        tmp_data_V_16_reg_4130 <= data_V_data_16_V_dout;
        tmp_data_V_17_reg_4135 <= data_V_data_17_V_dout;
        tmp_data_V_18_reg_4140 <= data_V_data_18_V_dout;
        tmp_data_V_19_reg_4145 <= data_V_data_19_V_dout;
        tmp_data_V_1_reg_4055 <= data_V_data_1_V_dout;
        tmp_data_V_20_reg_4150 <= data_V_data_20_V_dout;
        tmp_data_V_21_reg_4155 <= data_V_data_21_V_dout;
        tmp_data_V_22_reg_4160 <= data_V_data_22_V_dout;
        tmp_data_V_23_reg_4165 <= data_V_data_23_V_dout;
        tmp_data_V_2_reg_4060 <= data_V_data_2_V_dout;
        tmp_data_V_3_reg_4065 <= data_V_data_3_V_dout;
        tmp_data_V_4_reg_4070 <= data_V_data_4_V_dout;
        tmp_data_V_5_reg_4075 <= data_V_data_5_V_dout;
        tmp_data_V_6_reg_4080 <= data_V_data_6_V_dout;
        tmp_data_V_7_reg_4085 <= data_V_data_7_V_dout;
        tmp_data_V_8_reg_4090 <= data_V_data_8_V_dout;
        tmp_data_V_9_reg_4095 <= data_V_data_9_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        trunc_ln708_102_reg_4180 <= {{mul_ln1118_113_fu_979_p2[25:10]}};
        trunc_ln708_103_reg_4185 <= {{mul_ln1118_114_fu_960_p2[25:10]}};
        trunc_ln708_104_reg_4190 <= {{mul_ln1118_115_fu_968_p2[25:10]}};
        trunc_ln708_105_reg_4195 <= {{mul_ln1118_116_fu_964_p2[25:10]}};
        trunc_ln708_106_reg_4200 <= {{mul_ln1118_117_fu_971_p2[25:10]}};
        trunc_ln708_107_reg_4205 <= {{mul_ln1118_118_fu_973_p2[25:10]}};
        trunc_ln708_108_reg_4210 <= {{mul_ln1118_119_fu_963_p2[25:10]}};
        trunc_ln708_109_reg_4215 <= {{mul_ln1118_120_fu_970_p2[25:10]}};
        trunc_ln708_110_reg_4220 <= {{mul_ln1118_121_fu_977_p2[25:10]}};
        trunc_ln708_111_reg_4225 <= {{mul_ln1118_122_fu_959_p2[25:10]}};
        trunc_ln708_112_reg_4230 <= {{mul_ln1118_123_fu_967_p2[25:10]}};
        trunc_ln708_113_reg_4235 <= {{mul_ln1118_124_fu_978_p2[25:10]}};
        trunc_ln708_114_reg_4240 <= {{mul_ln1118_125_fu_972_p2[25:10]}};
        trunc_ln708_115_reg_4245 <= {{mul_ln1118_126_fu_965_p2[25:10]}};
        trunc_ln708_116_reg_4250 <= {{mul_ln1118_127_fu_958_p2[25:10]}};
        trunc_ln708_117_reg_4255 <= {{mul_ln1118_128_fu_974_p2[25:10]}};
        trunc_ln708_118_reg_4260 <= {{mul_ln1118_129_fu_975_p2[25:10]}};
        trunc_ln708_119_reg_4265 <= {{mul_ln1118_130_fu_969_p2[25:10]}};
        trunc_ln708_120_reg_4270 <= {{mul_ln1118_131_fu_966_p2[25:10]}};
        trunc_ln708_121_reg_4275 <= {{mul_ln1118_132_fu_961_p2[25:10]}};
        trunc_ln708_122_reg_4280 <= {{mul_ln1118_133_fu_962_p2[25:10]}};
        trunc_ln708_123_reg_4285 <= {{mul_ln1118_134_fu_976_p2[25:10]}};
        trunc_ln708_s_reg_4175 <= {{mul_ln1118_112_fu_957_p2[25:10]}};
        trunc_ln_reg_4170 <= {{mul_ln1118_fu_980_p2[25:10]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op62 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_10_V_blk_n = data_V_data_10_V_empty_n;
    end else begin
        data_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op62 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_data_10_V_read = 1'b1;
    end else begin
        data_V_data_10_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_11_V_blk_n = data_V_data_11_V_empty_n;
    end else begin
        data_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op62 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_data_11_V_read = 1'b1;
    end else begin
        data_V_data_11_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_12_V_blk_n = data_V_data_12_V_empty_n;
    end else begin
        data_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op62 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_data_12_V_read = 1'b1;
    end else begin
        data_V_data_12_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_13_V_blk_n = data_V_data_13_V_empty_n;
    end else begin
        data_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op62 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_data_13_V_read = 1'b1;
    end else begin
        data_V_data_13_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_14_V_blk_n = data_V_data_14_V_empty_n;
    end else begin
        data_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op62 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_data_14_V_read = 1'b1;
    end else begin
        data_V_data_14_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_15_V_blk_n = data_V_data_15_V_empty_n;
    end else begin
        data_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op62 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_data_15_V_read = 1'b1;
    end else begin
        data_V_data_15_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_16_V_blk_n = data_V_data_16_V_empty_n;
    end else begin
        data_V_data_16_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op62 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_data_16_V_read = 1'b1;
    end else begin
        data_V_data_16_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_17_V_blk_n = data_V_data_17_V_empty_n;
    end else begin
        data_V_data_17_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op62 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_data_17_V_read = 1'b1;
    end else begin
        data_V_data_17_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_18_V_blk_n = data_V_data_18_V_empty_n;
    end else begin
        data_V_data_18_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op62 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_data_18_V_read = 1'b1;
    end else begin
        data_V_data_18_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_19_V_blk_n = data_V_data_19_V_empty_n;
    end else begin
        data_V_data_19_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op62 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_data_19_V_read = 1'b1;
    end else begin
        data_V_data_19_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op62 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_20_V_blk_n = data_V_data_20_V_empty_n;
    end else begin
        data_V_data_20_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op62 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_data_20_V_read = 1'b1;
    end else begin
        data_V_data_20_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_21_V_blk_n = data_V_data_21_V_empty_n;
    end else begin
        data_V_data_21_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op62 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_data_21_V_read = 1'b1;
    end else begin
        data_V_data_21_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_22_V_blk_n = data_V_data_22_V_empty_n;
    end else begin
        data_V_data_22_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op62 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_data_22_V_read = 1'b1;
    end else begin
        data_V_data_22_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_23_V_blk_n = data_V_data_23_V_empty_n;
    end else begin
        data_V_data_23_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op62 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_data_23_V_read = 1'b1;
    end else begin
        data_V_data_23_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op62 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op62 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op62 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op62 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op62 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op62 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op62 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op62 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op186 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_V_data_10_V_blk_n = res_V_data_10_V_full_n;
    end else begin
        res_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op186 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_V_data_10_V_write = 1'b1;
    end else begin
        res_V_data_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_V_data_11_V_blk_n = res_V_data_11_V_full_n;
    end else begin
        res_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op186 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_V_data_11_V_write = 1'b1;
    end else begin
        res_V_data_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_V_data_12_V_blk_n = res_V_data_12_V_full_n;
    end else begin
        res_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op186 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_V_data_12_V_write = 1'b1;
    end else begin
        res_V_data_12_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_V_data_13_V_blk_n = res_V_data_13_V_full_n;
    end else begin
        res_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op186 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_V_data_13_V_write = 1'b1;
    end else begin
        res_V_data_13_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_V_data_14_V_blk_n = res_V_data_14_V_full_n;
    end else begin
        res_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op186 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_V_data_14_V_write = 1'b1;
    end else begin
        res_V_data_14_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_V_data_15_V_blk_n = res_V_data_15_V_full_n;
    end else begin
        res_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op186 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_V_data_15_V_write = 1'b1;
    end else begin
        res_V_data_15_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_V_data_16_V_blk_n = res_V_data_16_V_full_n;
    end else begin
        res_V_data_16_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op186 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_V_data_16_V_write = 1'b1;
    end else begin
        res_V_data_16_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_V_data_17_V_blk_n = res_V_data_17_V_full_n;
    end else begin
        res_V_data_17_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op186 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_V_data_17_V_write = 1'b1;
    end else begin
        res_V_data_17_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_V_data_18_V_blk_n = res_V_data_18_V_full_n;
    end else begin
        res_V_data_18_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op186 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_V_data_18_V_write = 1'b1;
    end else begin
        res_V_data_18_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_V_data_19_V_blk_n = res_V_data_19_V_full_n;
    end else begin
        res_V_data_19_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op186 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_V_data_19_V_write = 1'b1;
    end else begin
        res_V_data_19_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op186 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_V_data_20_V_blk_n = res_V_data_20_V_full_n;
    end else begin
        res_V_data_20_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op186 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_V_data_20_V_write = 1'b1;
    end else begin
        res_V_data_20_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_V_data_21_V_blk_n = res_V_data_21_V_full_n;
    end else begin
        res_V_data_21_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op186 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_V_data_21_V_write = 1'b1;
    end else begin
        res_V_data_21_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_V_data_22_V_blk_n = res_V_data_22_V_full_n;
    end else begin
        res_V_data_22_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op186 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_V_data_22_V_write = 1'b1;
    end else begin
        res_V_data_22_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_V_data_23_V_blk_n = res_V_data_23_V_full_n;
    end else begin
        res_V_data_23_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op186 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_V_data_23_V_write = 1'b1;
    end else begin
        res_V_data_23_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op186 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op186 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op186 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op186 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op186 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op186 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_V_data_8_V_blk_n = res_V_data_8_V_full_n;
    end else begin
        res_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op186 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_V_data_8_V_write = 1'b1;
    end else begin
        res_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_V_data_9_V_blk_n = res_V_data_9_V_full_n;
    end else begin
        res_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op186 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_V_data_9_V_write = 1'b1;
    end else begin
        res_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln48_fu_3454_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((io_acc_block_signal_op62 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((io_acc_block_signal_op186 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign i_fu_3460_p2 = (i_0_reg_946 + 5'd1);

assign icmp_ln48_fu_3454_p2 = ((i_0_reg_946 == 5'd16) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op186 = (res_V_data_9_V_full_n & res_V_data_8_V_full_n & res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_23_V_full_n & res_V_data_22_V_full_n & res_V_data_21_V_full_n & res_V_data_20_V_full_n & res_V_data_1_V_full_n & res_V_data_19_V_full_n & res_V_data_18_V_full_n & res_V_data_17_V_full_n & res_V_data_16_V_full_n & res_V_data_15_V_full_n & res_V_data_14_V_full_n & res_V_data_13_V_full_n & res_V_data_12_V_full_n & res_V_data_11_V_full_n & res_V_data_10_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op62 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_23_V_empty_n & data_V_data_22_V_empty_n & data_V_data_21_V_empty_n & data_V_data_20_V_empty_n & data_V_data_1_V_empty_n & data_V_data_19_V_empty_n & data_V_data_18_V_empty_n & data_V_data_17_V_empty_n & data_V_data_16_V_empty_n & data_V_data_15_V_empty_n & data_V_data_14_V_empty_n & data_V_data_13_V_empty_n & data_V_data_12_V_empty_n & data_V_data_11_V_empty_n & data_V_data_10_V_empty_n & data_V_data_0_V_empty_n);

assign mul_ln1118_112_fu_957_p0 = tmp_data_V_1_reg_4055;

assign mul_ln1118_112_fu_957_p2 = ($signed(mul_ln1118_112_fu_957_p0) * $signed('h6F2));

assign mul_ln1118_113_fu_979_p0 = tmp_data_V_2_reg_4060;

assign mul_ln1118_113_fu_979_p2 = ($signed(mul_ln1118_113_fu_979_p0) * $signed('h584));

assign mul_ln1118_114_fu_960_p0 = tmp_data_V_3_reg_4065;

assign mul_ln1118_114_fu_960_p2 = ($signed(mul_ln1118_114_fu_960_p0) * $signed('h52B));

assign mul_ln1118_115_fu_968_p0 = tmp_data_V_4_reg_4070;

assign mul_ln1118_115_fu_968_p2 = ($signed(mul_ln1118_115_fu_968_p0) * $signed('h57A));

assign mul_ln1118_116_fu_964_p0 = tmp_data_V_5_reg_4075;

assign mul_ln1118_116_fu_964_p2 = ($signed(mul_ln1118_116_fu_964_p0) * $signed('h6C0));

assign mul_ln1118_117_fu_971_p0 = tmp_data_V_6_reg_4080;

assign mul_ln1118_117_fu_971_p2 = ($signed(mul_ln1118_117_fu_971_p0) * $signed('h5F8));

assign mul_ln1118_118_fu_973_p0 = tmp_data_V_7_reg_4085;

assign mul_ln1118_118_fu_973_p2 = ($signed(mul_ln1118_118_fu_973_p0) * $signed('h5AE));

assign mul_ln1118_119_fu_963_p0 = tmp_data_V_8_reg_4090;

assign mul_ln1118_119_fu_963_p2 = ($signed(mul_ln1118_119_fu_963_p0) * $signed('h55A));

assign mul_ln1118_120_fu_970_p0 = tmp_data_V_9_reg_4095;

assign mul_ln1118_120_fu_970_p2 = ($signed(mul_ln1118_120_fu_970_p0) * $signed('h5FF));

assign mul_ln1118_121_fu_977_p0 = tmp_data_V_10_reg_4100;

assign mul_ln1118_121_fu_977_p2 = ($signed(mul_ln1118_121_fu_977_p0) * $signed('h534));

assign mul_ln1118_122_fu_959_p0 = tmp_data_V_11_reg_4105;

assign mul_ln1118_122_fu_959_p2 = ($signed(mul_ln1118_122_fu_959_p0) * $signed('h5DE));

assign mul_ln1118_123_fu_967_p0 = tmp_data_V_1230_reg_4110;

assign mul_ln1118_123_fu_967_p2 = ($signed(mul_ln1118_123_fu_967_p0) * $signed('h67F));

assign mul_ln1118_124_fu_978_p0 = tmp_data_V_13_reg_4115;

assign mul_ln1118_124_fu_978_p2 = ($signed(mul_ln1118_124_fu_978_p0) * $signed('h5F5));

assign mul_ln1118_125_fu_972_p0 = tmp_data_V_14_reg_4120;

assign mul_ln1118_125_fu_972_p2 = ($signed(mul_ln1118_125_fu_972_p0) * $signed('h665));

assign mul_ln1118_126_fu_965_p0 = tmp_data_V_15_reg_4125;

assign mul_ln1118_126_fu_965_p2 = ($signed(mul_ln1118_126_fu_965_p0) * $signed('h5ED));

assign mul_ln1118_127_fu_958_p0 = tmp_data_V_16_reg_4130;

assign mul_ln1118_127_fu_958_p2 = ($signed(mul_ln1118_127_fu_958_p0) * $signed('h5EC));

assign mul_ln1118_128_fu_974_p0 = tmp_data_V_17_reg_4135;

assign mul_ln1118_128_fu_974_p2 = ($signed(mul_ln1118_128_fu_974_p0) * $signed('h624));

assign mul_ln1118_129_fu_975_p0 = tmp_data_V_18_reg_4140;

assign mul_ln1118_129_fu_975_p2 = ($signed(mul_ln1118_129_fu_975_p0) * $signed('h5F9));

assign mul_ln1118_130_fu_969_p0 = tmp_data_V_19_reg_4145;

assign mul_ln1118_130_fu_969_p2 = ($signed(mul_ln1118_130_fu_969_p0) * $signed('h55F));

assign mul_ln1118_131_fu_966_p0 = tmp_data_V_20_reg_4150;

assign mul_ln1118_131_fu_966_p2 = ($signed(mul_ln1118_131_fu_966_p0) * $signed('h55D));

assign mul_ln1118_132_fu_961_p0 = tmp_data_V_21_reg_4155;

assign mul_ln1118_132_fu_961_p2 = ($signed(mul_ln1118_132_fu_961_p0) * $signed('h73D));

assign mul_ln1118_133_fu_962_p0 = tmp_data_V_22_reg_4160;

assign mul_ln1118_133_fu_962_p2 = ($signed(mul_ln1118_133_fu_962_p0) * $signed('h4C7));

assign mul_ln1118_134_fu_976_p0 = tmp_data_V_23_reg_4165;

assign mul_ln1118_134_fu_976_p2 = ($signed(mul_ln1118_134_fu_976_p0) * $signed('h5E1));

assign mul_ln1118_fu_980_p0 = tmp_data_V_0_reg_4050;

assign mul_ln1118_fu_980_p2 = ($signed(mul_ln1118_fu_980_p0) * $signed('h5FE));

assign res_V_data_0_V_din = (trunc_ln_reg_4170 + 16'd160);

assign res_V_data_10_V_din = (trunc_ln708_110_reg_4220 + 16'd707);

assign res_V_data_11_V_din = (trunc_ln708_111_reg_4225 + 16'd1040);

assign res_V_data_12_V_din = ($signed(trunc_ln708_112_reg_4230) + $signed(16'd65425));

assign res_V_data_13_V_din = (trunc_ln708_113_reg_4235 + 16'd445);

assign res_V_data_14_V_din = (trunc_ln708_114_reg_4240 + 16'd295);

assign res_V_data_15_V_din = (trunc_ln708_115_reg_4245 + 16'd1028);

assign res_V_data_16_V_din = (trunc_ln708_116_reg_4250 + 16'd919);

assign res_V_data_17_V_din = (trunc_ln708_117_reg_4255 + 16'd106);

assign res_V_data_18_V_din = ($signed(trunc_ln708_118_reg_4260) + $signed(16'd65139));

assign res_V_data_19_V_din = (trunc_ln708_119_reg_4265 + 16'd466);

assign res_V_data_1_V_din = ($signed(trunc_ln708_s_reg_4175) + $signed(16'd65210));

assign res_V_data_20_V_din = ($signed(trunc_ln708_120_reg_4270) + $signed(16'd65282));

assign res_V_data_21_V_din = (trunc_ln708_121_reg_4275 + 16'd1740);

assign res_V_data_22_V_din = (trunc_ln708_122_reg_4280 + 16'd574);

assign res_V_data_23_V_din = (trunc_ln708_123_reg_4285 + 16'd137);

assign res_V_data_2_V_din = (trunc_ln708_102_reg_4180 + 16'd346);

assign res_V_data_3_V_din = (trunc_ln708_103_reg_4185 + 16'd289);

assign res_V_data_4_V_din = (trunc_ln708_104_reg_4190 + 16'd635);

assign res_V_data_5_V_din = (trunc_ln708_105_reg_4195 + 16'd1508);

assign res_V_data_6_V_din = (trunc_ln708_106_reg_4200 + 16'd204);

assign res_V_data_7_V_din = (trunc_ln708_107_reg_4205 + 16'd582);

assign res_V_data_8_V_din = ($signed(trunc_ln708_108_reg_4210) + $signed(16'd65375));

assign res_V_data_9_V_din = (trunc_ln708_109_reg_4215 + 16'd474);

assign start_out = real_start;

endmodule //normalize_array_array_ap_fixed_24u_config14_s
