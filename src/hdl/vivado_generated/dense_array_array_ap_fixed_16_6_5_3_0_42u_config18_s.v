// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_array_array_ap_fixed_16_6_5_3_0_42u_config18_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_stream_V_data_0_V_dout,
        data_stream_V_data_0_V_empty_n,
        data_stream_V_data_0_V_read,
        data_stream_V_data_1_V_dout,
        data_stream_V_data_1_V_empty_n,
        data_stream_V_data_1_V_read,
        data_stream_V_data_2_V_dout,
        data_stream_V_data_2_V_empty_n,
        data_stream_V_data_2_V_read,
        data_stream_V_data_3_V_dout,
        data_stream_V_data_3_V_empty_n,
        data_stream_V_data_3_V_read,
        data_stream_V_data_4_V_dout,
        data_stream_V_data_4_V_empty_n,
        data_stream_V_data_4_V_read,
        data_stream_V_data_5_V_dout,
        data_stream_V_data_5_V_empty_n,
        data_stream_V_data_5_V_read,
        data_stream_V_data_6_V_dout,
        data_stream_V_data_6_V_empty_n,
        data_stream_V_data_6_V_read,
        data_stream_V_data_7_V_dout,
        data_stream_V_data_7_V_empty_n,
        data_stream_V_data_7_V_read,
        data_stream_V_data_8_V_dout,
        data_stream_V_data_8_V_empty_n,
        data_stream_V_data_8_V_read,
        data_stream_V_data_9_V_dout,
        data_stream_V_data_9_V_empty_n,
        data_stream_V_data_9_V_read,
        data_stream_V_data_10_V_dout,
        data_stream_V_data_10_V_empty_n,
        data_stream_V_data_10_V_read,
        data_stream_V_data_11_V_dout,
        data_stream_V_data_11_V_empty_n,
        data_stream_V_data_11_V_read,
        data_stream_V_data_12_V_dout,
        data_stream_V_data_12_V_empty_n,
        data_stream_V_data_12_V_read,
        data_stream_V_data_13_V_dout,
        data_stream_V_data_13_V_empty_n,
        data_stream_V_data_13_V_read,
        data_stream_V_data_14_V_dout,
        data_stream_V_data_14_V_empty_n,
        data_stream_V_data_14_V_read,
        data_stream_V_data_15_V_dout,
        data_stream_V_data_15_V_empty_n,
        data_stream_V_data_15_V_read,
        data_stream_V_data_16_V_dout,
        data_stream_V_data_16_V_empty_n,
        data_stream_V_data_16_V_read,
        data_stream_V_data_17_V_dout,
        data_stream_V_data_17_V_empty_n,
        data_stream_V_data_17_V_read,
        data_stream_V_data_18_V_dout,
        data_stream_V_data_18_V_empty_n,
        data_stream_V_data_18_V_read,
        data_stream_V_data_19_V_dout,
        data_stream_V_data_19_V_empty_n,
        data_stream_V_data_19_V_read,
        data_stream_V_data_20_V_dout,
        data_stream_V_data_20_V_empty_n,
        data_stream_V_data_20_V_read,
        data_stream_V_data_21_V_dout,
        data_stream_V_data_21_V_empty_n,
        data_stream_V_data_21_V_read,
        data_stream_V_data_22_V_dout,
        data_stream_V_data_22_V_empty_n,
        data_stream_V_data_22_V_read,
        data_stream_V_data_23_V_dout,
        data_stream_V_data_23_V_empty_n,
        data_stream_V_data_23_V_read,
        res_stream_V_data_0_V_din,
        res_stream_V_data_0_V_full_n,
        res_stream_V_data_0_V_write,
        res_stream_V_data_1_V_din,
        res_stream_V_data_1_V_full_n,
        res_stream_V_data_1_V_write,
        res_stream_V_data_2_V_din,
        res_stream_V_data_2_V_full_n,
        res_stream_V_data_2_V_write,
        res_stream_V_data_3_V_din,
        res_stream_V_data_3_V_full_n,
        res_stream_V_data_3_V_write,
        res_stream_V_data_4_V_din,
        res_stream_V_data_4_V_full_n,
        res_stream_V_data_4_V_write,
        res_stream_V_data_5_V_din,
        res_stream_V_data_5_V_full_n,
        res_stream_V_data_5_V_write,
        res_stream_V_data_6_V_din,
        res_stream_V_data_6_V_full_n,
        res_stream_V_data_6_V_write,
        res_stream_V_data_7_V_din,
        res_stream_V_data_7_V_full_n,
        res_stream_V_data_7_V_write,
        res_stream_V_data_8_V_din,
        res_stream_V_data_8_V_full_n,
        res_stream_V_data_8_V_write,
        res_stream_V_data_9_V_din,
        res_stream_V_data_9_V_full_n,
        res_stream_V_data_9_V_write,
        res_stream_V_data_10_V_din,
        res_stream_V_data_10_V_full_n,
        res_stream_V_data_10_V_write,
        res_stream_V_data_11_V_din,
        res_stream_V_data_11_V_full_n,
        res_stream_V_data_11_V_write,
        res_stream_V_data_12_V_din,
        res_stream_V_data_12_V_full_n,
        res_stream_V_data_12_V_write,
        res_stream_V_data_13_V_din,
        res_stream_V_data_13_V_full_n,
        res_stream_V_data_13_V_write,
        res_stream_V_data_14_V_din,
        res_stream_V_data_14_V_full_n,
        res_stream_V_data_14_V_write,
        res_stream_V_data_15_V_din,
        res_stream_V_data_15_V_full_n,
        res_stream_V_data_15_V_write,
        res_stream_V_data_16_V_din,
        res_stream_V_data_16_V_full_n,
        res_stream_V_data_16_V_write,
        res_stream_V_data_17_V_din,
        res_stream_V_data_17_V_full_n,
        res_stream_V_data_17_V_write,
        res_stream_V_data_18_V_din,
        res_stream_V_data_18_V_full_n,
        res_stream_V_data_18_V_write,
        res_stream_V_data_19_V_din,
        res_stream_V_data_19_V_full_n,
        res_stream_V_data_19_V_write,
        res_stream_V_data_20_V_din,
        res_stream_V_data_20_V_full_n,
        res_stream_V_data_20_V_write,
        res_stream_V_data_21_V_din,
        res_stream_V_data_21_V_full_n,
        res_stream_V_data_21_V_write,
        res_stream_V_data_22_V_din,
        res_stream_V_data_22_V_full_n,
        res_stream_V_data_22_V_write,
        res_stream_V_data_23_V_din,
        res_stream_V_data_23_V_full_n,
        res_stream_V_data_23_V_write,
        res_stream_V_data_24_V_din,
        res_stream_V_data_24_V_full_n,
        res_stream_V_data_24_V_write,
        res_stream_V_data_25_V_din,
        res_stream_V_data_25_V_full_n,
        res_stream_V_data_25_V_write,
        res_stream_V_data_26_V_din,
        res_stream_V_data_26_V_full_n,
        res_stream_V_data_26_V_write,
        res_stream_V_data_27_V_din,
        res_stream_V_data_27_V_full_n,
        res_stream_V_data_27_V_write,
        res_stream_V_data_28_V_din,
        res_stream_V_data_28_V_full_n,
        res_stream_V_data_28_V_write,
        res_stream_V_data_29_V_din,
        res_stream_V_data_29_V_full_n,
        res_stream_V_data_29_V_write,
        res_stream_V_data_30_V_din,
        res_stream_V_data_30_V_full_n,
        res_stream_V_data_30_V_write,
        res_stream_V_data_31_V_din,
        res_stream_V_data_31_V_full_n,
        res_stream_V_data_31_V_write,
        res_stream_V_data_32_V_din,
        res_stream_V_data_32_V_full_n,
        res_stream_V_data_32_V_write,
        res_stream_V_data_33_V_din,
        res_stream_V_data_33_V_full_n,
        res_stream_V_data_33_V_write,
        res_stream_V_data_34_V_din,
        res_stream_V_data_34_V_full_n,
        res_stream_V_data_34_V_write,
        res_stream_V_data_35_V_din,
        res_stream_V_data_35_V_full_n,
        res_stream_V_data_35_V_write,
        res_stream_V_data_36_V_din,
        res_stream_V_data_36_V_full_n,
        res_stream_V_data_36_V_write,
        res_stream_V_data_37_V_din,
        res_stream_V_data_37_V_full_n,
        res_stream_V_data_37_V_write,
        res_stream_V_data_38_V_din,
        res_stream_V_data_38_V_full_n,
        res_stream_V_data_38_V_write,
        res_stream_V_data_39_V_din,
        res_stream_V_data_39_V_full_n,
        res_stream_V_data_39_V_write,
        res_stream_V_data_40_V_din,
        res_stream_V_data_40_V_full_n,
        res_stream_V_data_40_V_write,
        res_stream_V_data_41_V_din,
        res_stream_V_data_41_V_full_n,
        res_stream_V_data_41_V_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_state4 = 5'd4;
parameter    ap_ST_fsm_state5 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_stream_V_data_0_V_dout;
input   data_stream_V_data_0_V_empty_n;
output   data_stream_V_data_0_V_read;
input  [15:0] data_stream_V_data_1_V_dout;
input   data_stream_V_data_1_V_empty_n;
output   data_stream_V_data_1_V_read;
input  [15:0] data_stream_V_data_2_V_dout;
input   data_stream_V_data_2_V_empty_n;
output   data_stream_V_data_2_V_read;
input  [15:0] data_stream_V_data_3_V_dout;
input   data_stream_V_data_3_V_empty_n;
output   data_stream_V_data_3_V_read;
input  [15:0] data_stream_V_data_4_V_dout;
input   data_stream_V_data_4_V_empty_n;
output   data_stream_V_data_4_V_read;
input  [15:0] data_stream_V_data_5_V_dout;
input   data_stream_V_data_5_V_empty_n;
output   data_stream_V_data_5_V_read;
input  [15:0] data_stream_V_data_6_V_dout;
input   data_stream_V_data_6_V_empty_n;
output   data_stream_V_data_6_V_read;
input  [15:0] data_stream_V_data_7_V_dout;
input   data_stream_V_data_7_V_empty_n;
output   data_stream_V_data_7_V_read;
input  [15:0] data_stream_V_data_8_V_dout;
input   data_stream_V_data_8_V_empty_n;
output   data_stream_V_data_8_V_read;
input  [15:0] data_stream_V_data_9_V_dout;
input   data_stream_V_data_9_V_empty_n;
output   data_stream_V_data_9_V_read;
input  [15:0] data_stream_V_data_10_V_dout;
input   data_stream_V_data_10_V_empty_n;
output   data_stream_V_data_10_V_read;
input  [15:0] data_stream_V_data_11_V_dout;
input   data_stream_V_data_11_V_empty_n;
output   data_stream_V_data_11_V_read;
input  [15:0] data_stream_V_data_12_V_dout;
input   data_stream_V_data_12_V_empty_n;
output   data_stream_V_data_12_V_read;
input  [15:0] data_stream_V_data_13_V_dout;
input   data_stream_V_data_13_V_empty_n;
output   data_stream_V_data_13_V_read;
input  [15:0] data_stream_V_data_14_V_dout;
input   data_stream_V_data_14_V_empty_n;
output   data_stream_V_data_14_V_read;
input  [15:0] data_stream_V_data_15_V_dout;
input   data_stream_V_data_15_V_empty_n;
output   data_stream_V_data_15_V_read;
input  [15:0] data_stream_V_data_16_V_dout;
input   data_stream_V_data_16_V_empty_n;
output   data_stream_V_data_16_V_read;
input  [15:0] data_stream_V_data_17_V_dout;
input   data_stream_V_data_17_V_empty_n;
output   data_stream_V_data_17_V_read;
input  [15:0] data_stream_V_data_18_V_dout;
input   data_stream_V_data_18_V_empty_n;
output   data_stream_V_data_18_V_read;
input  [15:0] data_stream_V_data_19_V_dout;
input   data_stream_V_data_19_V_empty_n;
output   data_stream_V_data_19_V_read;
input  [15:0] data_stream_V_data_20_V_dout;
input   data_stream_V_data_20_V_empty_n;
output   data_stream_V_data_20_V_read;
input  [15:0] data_stream_V_data_21_V_dout;
input   data_stream_V_data_21_V_empty_n;
output   data_stream_V_data_21_V_read;
input  [15:0] data_stream_V_data_22_V_dout;
input   data_stream_V_data_22_V_empty_n;
output   data_stream_V_data_22_V_read;
input  [15:0] data_stream_V_data_23_V_dout;
input   data_stream_V_data_23_V_empty_n;
output   data_stream_V_data_23_V_read;
output  [15:0] res_stream_V_data_0_V_din;
input   res_stream_V_data_0_V_full_n;
output   res_stream_V_data_0_V_write;
output  [15:0] res_stream_V_data_1_V_din;
input   res_stream_V_data_1_V_full_n;
output   res_stream_V_data_1_V_write;
output  [15:0] res_stream_V_data_2_V_din;
input   res_stream_V_data_2_V_full_n;
output   res_stream_V_data_2_V_write;
output  [15:0] res_stream_V_data_3_V_din;
input   res_stream_V_data_3_V_full_n;
output   res_stream_V_data_3_V_write;
output  [15:0] res_stream_V_data_4_V_din;
input   res_stream_V_data_4_V_full_n;
output   res_stream_V_data_4_V_write;
output  [15:0] res_stream_V_data_5_V_din;
input   res_stream_V_data_5_V_full_n;
output   res_stream_V_data_5_V_write;
output  [15:0] res_stream_V_data_6_V_din;
input   res_stream_V_data_6_V_full_n;
output   res_stream_V_data_6_V_write;
output  [15:0] res_stream_V_data_7_V_din;
input   res_stream_V_data_7_V_full_n;
output   res_stream_V_data_7_V_write;
output  [15:0] res_stream_V_data_8_V_din;
input   res_stream_V_data_8_V_full_n;
output   res_stream_V_data_8_V_write;
output  [15:0] res_stream_V_data_9_V_din;
input   res_stream_V_data_9_V_full_n;
output   res_stream_V_data_9_V_write;
output  [15:0] res_stream_V_data_10_V_din;
input   res_stream_V_data_10_V_full_n;
output   res_stream_V_data_10_V_write;
output  [15:0] res_stream_V_data_11_V_din;
input   res_stream_V_data_11_V_full_n;
output   res_stream_V_data_11_V_write;
output  [15:0] res_stream_V_data_12_V_din;
input   res_stream_V_data_12_V_full_n;
output   res_stream_V_data_12_V_write;
output  [15:0] res_stream_V_data_13_V_din;
input   res_stream_V_data_13_V_full_n;
output   res_stream_V_data_13_V_write;
output  [15:0] res_stream_V_data_14_V_din;
input   res_stream_V_data_14_V_full_n;
output   res_stream_V_data_14_V_write;
output  [15:0] res_stream_V_data_15_V_din;
input   res_stream_V_data_15_V_full_n;
output   res_stream_V_data_15_V_write;
output  [15:0] res_stream_V_data_16_V_din;
input   res_stream_V_data_16_V_full_n;
output   res_stream_V_data_16_V_write;
output  [15:0] res_stream_V_data_17_V_din;
input   res_stream_V_data_17_V_full_n;
output   res_stream_V_data_17_V_write;
output  [15:0] res_stream_V_data_18_V_din;
input   res_stream_V_data_18_V_full_n;
output   res_stream_V_data_18_V_write;
output  [15:0] res_stream_V_data_19_V_din;
input   res_stream_V_data_19_V_full_n;
output   res_stream_V_data_19_V_write;
output  [15:0] res_stream_V_data_20_V_din;
input   res_stream_V_data_20_V_full_n;
output   res_stream_V_data_20_V_write;
output  [15:0] res_stream_V_data_21_V_din;
input   res_stream_V_data_21_V_full_n;
output   res_stream_V_data_21_V_write;
output  [15:0] res_stream_V_data_22_V_din;
input   res_stream_V_data_22_V_full_n;
output   res_stream_V_data_22_V_write;
output  [15:0] res_stream_V_data_23_V_din;
input   res_stream_V_data_23_V_full_n;
output   res_stream_V_data_23_V_write;
output  [15:0] res_stream_V_data_24_V_din;
input   res_stream_V_data_24_V_full_n;
output   res_stream_V_data_24_V_write;
output  [15:0] res_stream_V_data_25_V_din;
input   res_stream_V_data_25_V_full_n;
output   res_stream_V_data_25_V_write;
output  [15:0] res_stream_V_data_26_V_din;
input   res_stream_V_data_26_V_full_n;
output   res_stream_V_data_26_V_write;
output  [15:0] res_stream_V_data_27_V_din;
input   res_stream_V_data_27_V_full_n;
output   res_stream_V_data_27_V_write;
output  [15:0] res_stream_V_data_28_V_din;
input   res_stream_V_data_28_V_full_n;
output   res_stream_V_data_28_V_write;
output  [15:0] res_stream_V_data_29_V_din;
input   res_stream_V_data_29_V_full_n;
output   res_stream_V_data_29_V_write;
output  [15:0] res_stream_V_data_30_V_din;
input   res_stream_V_data_30_V_full_n;
output   res_stream_V_data_30_V_write;
output  [15:0] res_stream_V_data_31_V_din;
input   res_stream_V_data_31_V_full_n;
output   res_stream_V_data_31_V_write;
output  [15:0] res_stream_V_data_32_V_din;
input   res_stream_V_data_32_V_full_n;
output   res_stream_V_data_32_V_write;
output  [15:0] res_stream_V_data_33_V_din;
input   res_stream_V_data_33_V_full_n;
output   res_stream_V_data_33_V_write;
output  [15:0] res_stream_V_data_34_V_din;
input   res_stream_V_data_34_V_full_n;
output   res_stream_V_data_34_V_write;
output  [15:0] res_stream_V_data_35_V_din;
input   res_stream_V_data_35_V_full_n;
output   res_stream_V_data_35_V_write;
output  [15:0] res_stream_V_data_36_V_din;
input   res_stream_V_data_36_V_full_n;
output   res_stream_V_data_36_V_write;
output  [15:0] res_stream_V_data_37_V_din;
input   res_stream_V_data_37_V_full_n;
output   res_stream_V_data_37_V_write;
output  [15:0] res_stream_V_data_38_V_din;
input   res_stream_V_data_38_V_full_n;
output   res_stream_V_data_38_V_write;
output  [15:0] res_stream_V_data_39_V_din;
input   res_stream_V_data_39_V_full_n;
output   res_stream_V_data_39_V_write;
output  [15:0] res_stream_V_data_40_V_din;
input   res_stream_V_data_40_V_full_n;
output   res_stream_V_data_40_V_write;
output  [15:0] res_stream_V_data_41_V_din;
input   res_stream_V_data_41_V_full_n;
output   res_stream_V_data_41_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_stream_V_data_0_V_read;
reg data_stream_V_data_1_V_read;
reg data_stream_V_data_2_V_read;
reg data_stream_V_data_3_V_read;
reg data_stream_V_data_4_V_read;
reg data_stream_V_data_5_V_read;
reg data_stream_V_data_6_V_read;
reg data_stream_V_data_7_V_read;
reg data_stream_V_data_8_V_read;
reg data_stream_V_data_9_V_read;
reg data_stream_V_data_10_V_read;
reg data_stream_V_data_11_V_read;
reg data_stream_V_data_12_V_read;
reg data_stream_V_data_13_V_read;
reg data_stream_V_data_14_V_read;
reg data_stream_V_data_15_V_read;
reg data_stream_V_data_16_V_read;
reg data_stream_V_data_17_V_read;
reg data_stream_V_data_18_V_read;
reg data_stream_V_data_19_V_read;
reg data_stream_V_data_20_V_read;
reg data_stream_V_data_21_V_read;
reg data_stream_V_data_22_V_read;
reg data_stream_V_data_23_V_read;
reg res_stream_V_data_0_V_write;
reg res_stream_V_data_1_V_write;
reg res_stream_V_data_2_V_write;
reg res_stream_V_data_3_V_write;
reg res_stream_V_data_4_V_write;
reg res_stream_V_data_5_V_write;
reg res_stream_V_data_6_V_write;
reg res_stream_V_data_7_V_write;
reg res_stream_V_data_8_V_write;
reg res_stream_V_data_9_V_write;
reg res_stream_V_data_10_V_write;
reg res_stream_V_data_11_V_write;
reg res_stream_V_data_12_V_write;
reg res_stream_V_data_13_V_write;
reg res_stream_V_data_14_V_write;
reg res_stream_V_data_15_V_write;
reg res_stream_V_data_16_V_write;
reg res_stream_V_data_17_V_write;
reg res_stream_V_data_18_V_write;
reg res_stream_V_data_19_V_write;
reg res_stream_V_data_20_V_write;
reg res_stream_V_data_21_V_write;
reg res_stream_V_data_22_V_write;
reg res_stream_V_data_23_V_write;
reg res_stream_V_data_24_V_write;
reg res_stream_V_data_25_V_write;
reg res_stream_V_data_26_V_write;
reg res_stream_V_data_27_V_write;
reg res_stream_V_data_28_V_write;
reg res_stream_V_data_29_V_write;
reg res_stream_V_data_30_V_write;
reg res_stream_V_data_31_V_write;
reg res_stream_V_data_32_V_write;
reg res_stream_V_data_33_V_write;
reg res_stream_V_data_34_V_write;
reg res_stream_V_data_35_V_write;
reg res_stream_V_data_36_V_write;
reg res_stream_V_data_37_V_write;
reg res_stream_V_data_38_V_write;
reg res_stream_V_data_39_V_write;
reg res_stream_V_data_40_V_write;
reg res_stream_V_data_41_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_stream_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    data_stream_V_data_1_V_blk_n;
reg    data_stream_V_data_2_V_blk_n;
reg    data_stream_V_data_3_V_blk_n;
reg    data_stream_V_data_4_V_blk_n;
reg    data_stream_V_data_5_V_blk_n;
reg    data_stream_V_data_6_V_blk_n;
reg    data_stream_V_data_7_V_blk_n;
reg    data_stream_V_data_8_V_blk_n;
reg    data_stream_V_data_9_V_blk_n;
reg    data_stream_V_data_10_V_blk_n;
reg    data_stream_V_data_11_V_blk_n;
reg    data_stream_V_data_12_V_blk_n;
reg    data_stream_V_data_13_V_blk_n;
reg    data_stream_V_data_14_V_blk_n;
reg    data_stream_V_data_15_V_blk_n;
reg    data_stream_V_data_16_V_blk_n;
reg    data_stream_V_data_17_V_blk_n;
reg    data_stream_V_data_18_V_blk_n;
reg    data_stream_V_data_19_V_blk_n;
reg    data_stream_V_data_20_V_blk_n;
reg    data_stream_V_data_21_V_blk_n;
reg    data_stream_V_data_22_V_blk_n;
reg    data_stream_V_data_23_V_blk_n;
reg    res_stream_V_data_0_V_blk_n;
wire    ap_CS_fsm_state6;
reg    res_stream_V_data_1_V_blk_n;
reg    res_stream_V_data_2_V_blk_n;
reg    res_stream_V_data_3_V_blk_n;
reg    res_stream_V_data_4_V_blk_n;
reg    res_stream_V_data_5_V_blk_n;
reg    res_stream_V_data_6_V_blk_n;
reg    res_stream_V_data_7_V_blk_n;
reg    res_stream_V_data_8_V_blk_n;
reg    res_stream_V_data_9_V_blk_n;
reg    res_stream_V_data_10_V_blk_n;
reg    res_stream_V_data_11_V_blk_n;
reg    res_stream_V_data_12_V_blk_n;
reg    res_stream_V_data_13_V_blk_n;
reg    res_stream_V_data_14_V_blk_n;
reg    res_stream_V_data_15_V_blk_n;
reg    res_stream_V_data_16_V_blk_n;
reg    res_stream_V_data_17_V_blk_n;
reg    res_stream_V_data_18_V_blk_n;
reg    res_stream_V_data_19_V_blk_n;
reg    res_stream_V_data_20_V_blk_n;
reg    res_stream_V_data_21_V_blk_n;
reg    res_stream_V_data_22_V_blk_n;
reg    res_stream_V_data_23_V_blk_n;
reg    res_stream_V_data_24_V_blk_n;
reg    res_stream_V_data_25_V_blk_n;
reg    res_stream_V_data_26_V_blk_n;
reg    res_stream_V_data_27_V_blk_n;
reg    res_stream_V_data_28_V_blk_n;
reg    res_stream_V_data_29_V_blk_n;
reg    res_stream_V_data_30_V_blk_n;
reg    res_stream_V_data_31_V_blk_n;
reg    res_stream_V_data_32_V_blk_n;
reg    res_stream_V_data_33_V_blk_n;
reg    res_stream_V_data_34_V_blk_n;
reg    res_stream_V_data_35_V_blk_n;
reg    res_stream_V_data_36_V_blk_n;
reg    res_stream_V_data_37_V_blk_n;
reg    res_stream_V_data_38_V_blk_n;
reg    res_stream_V_data_39_V_blk_n;
reg    res_stream_V_data_40_V_blk_n;
reg    res_stream_V_data_41_V_blk_n;
reg   [2:0] i_in_0_reg_1592;
wire   [0:0] icmp_ln41_fu_1705_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op216;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [2:0] i_in_fu_1711_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [6:0] sub_ln203_fu_1741_p2;
reg   [6:0] sub_ln203_reg_3502;
wire   [6:0] or_ln203_fu_1747_p2;
reg   [6:0] or_ln203_reg_3506;
wire   [6:0] or_ln203_1_fu_1753_p2;
reg   [6:0] or_ln203_1_reg_3510;
wire   [6:0] or_ln203_2_fu_1759_p2;
reg   [6:0] or_ln203_2_reg_3514;
wire   [6:0] or_ln203_3_fu_1765_p2;
reg   [6:0] or_ln203_3_reg_3518;
wire   [6:0] or_ln203_4_fu_1771_p2;
reg   [6:0] or_ln203_4_reg_3522;
wire   [6:0] or_ln203_5_fu_1777_p2;
reg   [6:0] or_ln203_5_reg_3526;
wire   [6:0] or_ln203_6_fu_1783_p2;
reg   [6:0] or_ln203_6_reg_3530;
wire    ap_CS_fsm_state4;
reg   [15:0] tmp_data_0_V_reg_4014;
wire    ap_CS_fsm_state5;
wire    grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_ready;
wire    grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_done;
reg   [15:0] tmp_data_1_V_reg_4019;
reg   [15:0] tmp_data_2_V_reg_4024;
reg   [15:0] tmp_data_3_V_reg_4029;
reg   [15:0] tmp_data_4_V_reg_4034;
reg   [15:0] tmp_data_5_V_reg_4039;
reg   [15:0] tmp_data_6_V_reg_4044;
reg   [15:0] tmp_data_7_V_reg_4049;
reg   [15:0] tmp_data_8_V_reg_4054;
reg   [15:0] tmp_data_9_V_reg_4059;
reg   [15:0] tmp_data_10_V_reg_4064;
reg   [15:0] tmp_data_11_V_reg_4069;
reg   [15:0] tmp_data_12_V_reg_4074;
reg   [15:0] tmp_data_13_V_reg_4079;
reg   [15:0] tmp_data_14_V_reg_4084;
reg   [15:0] tmp_data_15_V_reg_4089;
reg   [15:0] tmp_data_16_V_reg_4094;
reg   [15:0] tmp_data_17_V_reg_4099;
reg   [15:0] tmp_data_18_V_reg_4104;
reg   [15:0] tmp_data_19_V_reg_4109;
reg   [15:0] tmp_data_20_V_reg_4114;
reg   [15:0] tmp_data_21_V_reg_4119;
reg   [15:0] tmp_data_22_V_reg_4124;
reg   [15:0] tmp_data_23_V_reg_4129;
reg   [15:0] tmp_data_24_V_reg_4134;
reg   [15:0] tmp_data_25_V_reg_4139;
reg   [15:0] tmp_data_26_V_reg_4144;
reg   [15:0] tmp_data_27_V_reg_4149;
reg   [15:0] tmp_data_28_V_reg_4154;
reg   [15:0] tmp_data_29_V_reg_4159;
reg   [15:0] tmp_data_30_V_reg_4164;
reg   [15:0] tmp_data_31_V_reg_4169;
reg   [15:0] tmp_data_32_V_reg_4174;
reg   [15:0] tmp_data_33_V_reg_4179;
reg   [15:0] tmp_data_34_V_reg_4184;
reg   [15:0] tmp_data_35_V_reg_4189;
reg   [15:0] tmp_data_36_V_reg_4194;
reg   [15:0] tmp_data_37_V_reg_4199;
reg   [15:0] tmp_data_38_V_reg_4204;
reg   [15:0] tmp_data_39_V_reg_4209;
reg   [15:0] tmp_data_40_V_reg_4214;
reg   [15:0] tmp_data_41_V_reg_4219;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_start;
wire    grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_idle;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_0;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_1;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_2;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_3;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_4;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_5;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_6;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_7;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_8;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_9;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_10;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_11;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_12;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_13;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_14;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_15;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_16;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_17;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_18;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_19;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_20;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_21;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_22;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_23;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_24;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_25;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_26;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_27;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_28;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_29;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_30;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_31;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_32;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_33;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_34;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_35;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_36;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_37;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_38;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_39;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_40;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_41;
reg    grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_start_reg;
reg   [15:0] data_72_V_fu_1026;
reg   [15:0] data_73_V_fu_1030;
reg   [15:0] data_74_V_fu_1034;
reg   [15:0] data_75_V_fu_1038;
reg   [15:0] data_76_V_fu_1042;
reg   [15:0] data_77_V_fu_1046;
reg   [15:0] data_78_V_fu_1050;
reg   [15:0] data_79_V_fu_1054;
reg   [15:0] data_80_V_fu_1058;
reg   [15:0] data_81_V_fu_1062;
reg   [15:0] data_82_V_fu_1066;
reg   [15:0] data_83_V_fu_1070;
reg   [15:0] data_84_V_fu_1074;
reg   [15:0] data_85_V_fu_1078;
reg   [15:0] data_86_V_fu_1082;
reg   [15:0] data_87_V_fu_1086;
reg   [15:0] data_88_V_fu_1090;
reg   [15:0] data_89_V_fu_1094;
reg   [15:0] data_90_V_fu_1098;
reg   [15:0] data_91_V_fu_1102;
reg   [15:0] data_92_V_fu_1106;
reg   [15:0] data_93_V_fu_1110;
reg   [15:0] data_94_V_fu_1114;
reg   [15:0] data_95_V_fu_1118;
reg   [15:0] data_72_V_1_fu_1122;
reg   [15:0] data_73_V_1_fu_1126;
reg   [15:0] data_74_V_1_fu_1130;
reg   [15:0] data_75_V_1_fu_1134;
reg   [15:0] data_76_V_1_fu_1138;
reg   [15:0] data_77_V_1_fu_1142;
reg   [15:0] data_78_V_1_fu_1146;
reg   [15:0] data_79_V_1_fu_1150;
reg   [15:0] data_80_V_1_fu_1154;
reg   [15:0] data_81_V_1_fu_1158;
reg   [15:0] data_82_V_1_fu_1162;
reg   [15:0] data_83_V_1_fu_1166;
reg   [15:0] data_84_V_1_fu_1170;
reg   [15:0] data_85_V_1_fu_1174;
reg   [15:0] data_86_V_1_fu_1178;
reg   [15:0] data_87_V_1_fu_1182;
reg   [15:0] data_88_V_1_fu_1186;
reg   [15:0] data_89_V_1_fu_1190;
reg   [15:0] data_90_V_1_fu_1194;
reg   [15:0] data_91_V_1_fu_1198;
reg   [15:0] data_92_V_1_fu_1202;
reg   [15:0] data_93_V_1_fu_1206;
reg   [15:0] data_94_V_1_fu_1210;
reg   [15:0] data_95_V_1_fu_1214;
reg   [15:0] data_72_V_2_fu_1218;
reg   [15:0] data_73_V_2_fu_1222;
reg   [15:0] data_74_V_2_fu_1226;
reg   [15:0] data_75_V_2_fu_1230;
reg   [15:0] data_76_V_2_fu_1234;
reg   [15:0] data_77_V_2_fu_1238;
reg   [15:0] data_78_V_2_fu_1242;
reg   [15:0] data_79_V_2_fu_1246;
reg   [15:0] data_80_V_2_fu_1250;
reg   [15:0] data_81_V_2_fu_1254;
reg   [15:0] data_82_V_2_fu_1258;
reg   [15:0] data_83_V_2_fu_1262;
reg   [15:0] data_84_V_2_fu_1266;
reg   [15:0] data_85_V_2_fu_1270;
reg   [15:0] data_86_V_2_fu_1274;
reg   [15:0] data_87_V_2_fu_1278;
reg   [15:0] data_88_V_2_fu_1282;
reg   [15:0] data_89_V_2_fu_1286;
reg   [15:0] data_90_V_2_fu_1290;
reg   [15:0] data_91_V_2_fu_1294;
reg   [15:0] data_92_V_2_fu_1298;
reg   [15:0] data_93_V_2_fu_1302;
reg   [15:0] data_94_V_2_fu_1306;
reg   [15:0] data_95_V_2_fu_1310;
reg   [15:0] data_72_V_3_fu_1314;
reg   [15:0] data_73_V_3_fu_1318;
reg   [15:0] data_74_V_3_fu_1322;
reg   [15:0] data_75_V_3_fu_1326;
reg   [15:0] data_76_V_3_fu_1330;
reg   [15:0] data_77_V_3_fu_1334;
reg   [15:0] data_78_V_3_fu_1338;
reg   [15:0] data_79_V_3_fu_1342;
reg   [15:0] data_80_V_3_fu_1346;
reg   [15:0] data_81_V_3_fu_1350;
reg   [15:0] data_82_V_3_fu_1354;
reg   [15:0] data_83_V_3_fu_1358;
reg   [15:0] data_84_V_3_fu_1362;
reg   [15:0] data_85_V_3_fu_1366;
reg   [15:0] data_86_V_3_fu_1370;
reg   [15:0] data_87_V_3_fu_1374;
reg   [15:0] data_88_V_3_fu_1378;
reg   [15:0] data_89_V_3_fu_1382;
reg   [15:0] data_90_V_3_fu_1386;
reg   [15:0] data_91_V_3_fu_1390;
reg   [15:0] data_92_V_3_fu_1394;
reg   [15:0] data_93_V_3_fu_1398;
reg   [15:0] data_94_V_3_fu_1402;
reg   [15:0] data_95_V_3_fu_1406;
wire    io_acc_block_signal_op574;
wire   [1:0] trunc_ln48_fu_1717_p1;
wire   [4:0] shl_ln48_1_fu_1729_p3;
wire   [6:0] shl_ln_fu_1721_p3;
wire   [6:0] zext_ln203_fu_1737_p1;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_start_reg = 1'b0;
end

dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_start),
    .ap_done(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_done),
    .ap_idle(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_idle),
    .ap_ready(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_ready),
    .data_0_V_read(data_72_V_fu_1026),
    .data_1_V_read(data_73_V_fu_1030),
    .data_2_V_read(data_74_V_fu_1034),
    .data_3_V_read(data_75_V_fu_1038),
    .data_4_V_read(data_76_V_fu_1042),
    .data_5_V_read(data_77_V_fu_1046),
    .data_6_V_read(data_78_V_fu_1050),
    .data_7_V_read(data_79_V_fu_1054),
    .data_8_V_read(data_80_V_fu_1058),
    .data_9_V_read(data_81_V_fu_1062),
    .data_10_V_read(data_82_V_fu_1066),
    .data_11_V_read(data_83_V_fu_1070),
    .data_12_V_read(data_84_V_fu_1074),
    .data_13_V_read(data_85_V_fu_1078),
    .data_14_V_read(data_86_V_fu_1082),
    .data_15_V_read(data_87_V_fu_1086),
    .data_16_V_read(data_88_V_fu_1090),
    .data_17_V_read(data_89_V_fu_1094),
    .data_18_V_read(data_90_V_fu_1098),
    .data_19_V_read(data_91_V_fu_1102),
    .data_20_V_read(data_92_V_fu_1106),
    .data_21_V_read(data_93_V_fu_1110),
    .data_22_V_read(data_94_V_fu_1114),
    .data_23_V_read(data_95_V_fu_1118),
    .data_24_V_read(data_72_V_1_fu_1122),
    .data_25_V_read(data_73_V_1_fu_1126),
    .data_26_V_read(data_74_V_1_fu_1130),
    .data_27_V_read(data_75_V_1_fu_1134),
    .data_28_V_read(data_76_V_1_fu_1138),
    .data_29_V_read(data_77_V_1_fu_1142),
    .data_30_V_read(data_78_V_1_fu_1146),
    .data_31_V_read(data_79_V_1_fu_1150),
    .data_32_V_read(data_80_V_1_fu_1154),
    .data_33_V_read(data_81_V_1_fu_1158),
    .data_34_V_read(data_82_V_1_fu_1162),
    .data_35_V_read(data_83_V_1_fu_1166),
    .data_36_V_read(data_84_V_1_fu_1170),
    .data_37_V_read(data_85_V_1_fu_1174),
    .data_38_V_read(data_86_V_1_fu_1178),
    .data_39_V_read(data_87_V_1_fu_1182),
    .data_40_V_read(data_88_V_1_fu_1186),
    .data_41_V_read(data_89_V_1_fu_1190),
    .data_42_V_read(data_90_V_1_fu_1194),
    .data_43_V_read(data_91_V_1_fu_1198),
    .data_44_V_read(data_92_V_1_fu_1202),
    .data_45_V_read(data_93_V_1_fu_1206),
    .data_46_V_read(data_94_V_1_fu_1210),
    .data_47_V_read(data_95_V_1_fu_1214),
    .data_48_V_read(data_72_V_2_fu_1218),
    .data_49_V_read(data_73_V_2_fu_1222),
    .data_50_V_read(data_74_V_2_fu_1226),
    .data_51_V_read(data_75_V_2_fu_1230),
    .data_52_V_read(data_76_V_2_fu_1234),
    .data_53_V_read(data_77_V_2_fu_1238),
    .data_54_V_read(data_78_V_2_fu_1242),
    .data_55_V_read(data_79_V_2_fu_1246),
    .data_56_V_read(data_80_V_2_fu_1250),
    .data_57_V_read(data_81_V_2_fu_1254),
    .data_58_V_read(data_82_V_2_fu_1258),
    .data_59_V_read(data_83_V_2_fu_1262),
    .data_60_V_read(data_84_V_2_fu_1266),
    .data_61_V_read(data_85_V_2_fu_1270),
    .data_62_V_read(data_86_V_2_fu_1274),
    .data_63_V_read(data_87_V_2_fu_1278),
    .data_64_V_read(data_88_V_2_fu_1282),
    .data_65_V_read(data_89_V_2_fu_1286),
    .data_66_V_read(data_90_V_2_fu_1290),
    .data_67_V_read(data_91_V_2_fu_1294),
    .data_68_V_read(data_92_V_2_fu_1298),
    .data_69_V_read(data_93_V_2_fu_1302),
    .data_70_V_read(data_94_V_2_fu_1306),
    .data_71_V_read(data_95_V_2_fu_1310),
    .data_72_V_read(data_72_V_3_fu_1314),
    .data_73_V_read(data_73_V_3_fu_1318),
    .data_74_V_read(data_74_V_3_fu_1322),
    .data_75_V_read(data_75_V_3_fu_1326),
    .data_76_V_read(data_76_V_3_fu_1330),
    .data_77_V_read(data_77_V_3_fu_1334),
    .data_78_V_read(data_78_V_3_fu_1338),
    .data_79_V_read(data_79_V_3_fu_1342),
    .data_80_V_read(data_80_V_3_fu_1346),
    .data_81_V_read(data_81_V_3_fu_1350),
    .data_82_V_read(data_82_V_3_fu_1354),
    .data_83_V_read(data_83_V_3_fu_1358),
    .data_84_V_read(data_84_V_3_fu_1362),
    .data_85_V_read(data_85_V_3_fu_1366),
    .data_86_V_read(data_86_V_3_fu_1370),
    .data_87_V_read(data_87_V_3_fu_1374),
    .data_88_V_read(data_88_V_3_fu_1378),
    .data_89_V_read(data_89_V_3_fu_1382),
    .data_90_V_read(data_90_V_3_fu_1386),
    .data_91_V_read(data_91_V_3_fu_1390),
    .data_92_V_read(data_92_V_3_fu_1394),
    .data_93_V_read(data_93_V_3_fu_1398),
    .data_94_V_read(data_94_V_3_fu_1402),
    .data_95_V_read(data_95_V_3_fu_1406),
    .ap_return_0(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_0),
    .ap_return_1(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_1),
    .ap_return_2(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_2),
    .ap_return_3(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_3),
    .ap_return_4(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_4),
    .ap_return_5(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_5),
    .ap_return_6(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_6),
    .ap_return_7(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_7),
    .ap_return_8(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_8),
    .ap_return_9(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_9),
    .ap_return_10(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_10),
    .ap_return_11(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_11),
    .ap_return_12(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_12),
    .ap_return_13(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_13),
    .ap_return_14(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_14),
    .ap_return_15(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_15),
    .ap_return_16(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_16),
    .ap_return_17(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_17),
    .ap_return_18(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_18),
    .ap_return_19(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_19),
    .ap_return_20(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_20),
    .ap_return_21(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_21),
    .ap_return_22(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_22),
    .ap_return_23(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_23),
    .ap_return_24(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_24),
    .ap_return_25(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_25),
    .ap_return_26(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_26),
    .ap_return_27(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_27),
    .ap_return_28(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_28),
    .ap_return_29(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_29),
    .ap_return_30(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_30),
    .ap_return_31(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_31),
    .ap_return_32(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_32),
    .ap_return_33(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_33),
    .ap_return_34(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_34),
    .ap_return_35(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_35),
    .ap_return_36(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_36),
    .ap_return_37(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_37),
    .ap_return_38(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_38),
    .ap_return_39(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_39),
    .ap_return_40(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_40),
    .ap_return_41(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_41)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_start_reg <= 1'b1;
        end else if ((grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_ready == 1'b1)) begin
            grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_fu_1705_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_in_0_reg_1592 <= i_in_fu_1711_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_in_0_reg_1592 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((sub_ln203_reg_3502 == 7'd24) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_72_V_1_fu_1122 <= data_stream_V_data_0_V_dout;
        data_80_V_1_fu_1154 <= data_stream_V_data_8_V_dout;
        data_81_V_1_fu_1158 <= data_stream_V_data_9_V_dout;
        data_82_V_1_fu_1162 <= data_stream_V_data_10_V_dout;
        data_83_V_1_fu_1166 <= data_stream_V_data_11_V_dout;
        data_84_V_1_fu_1170 <= data_stream_V_data_12_V_dout;
        data_85_V_1_fu_1174 <= data_stream_V_data_13_V_dout;
        data_86_V_1_fu_1178 <= data_stream_V_data_14_V_dout;
        data_87_V_1_fu_1182 <= data_stream_V_data_15_V_dout;
        data_88_V_1_fu_1186 <= data_stream_V_data_16_V_dout;
        data_89_V_1_fu_1190 <= data_stream_V_data_17_V_dout;
        data_90_V_1_fu_1194 <= data_stream_V_data_18_V_dout;
        data_91_V_1_fu_1198 <= data_stream_V_data_19_V_dout;
        data_92_V_1_fu_1202 <= data_stream_V_data_20_V_dout;
        data_93_V_1_fu_1206 <= data_stream_V_data_21_V_dout;
        data_94_V_1_fu_1210 <= data_stream_V_data_22_V_dout;
        data_95_V_1_fu_1214 <= data_stream_V_data_23_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((sub_ln203_reg_3502 == 7'd48) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_72_V_2_fu_1218 <= data_stream_V_data_0_V_dout;
        data_80_V_2_fu_1250 <= data_stream_V_data_8_V_dout;
        data_81_V_2_fu_1254 <= data_stream_V_data_9_V_dout;
        data_82_V_2_fu_1258 <= data_stream_V_data_10_V_dout;
        data_83_V_2_fu_1262 <= data_stream_V_data_11_V_dout;
        data_84_V_2_fu_1266 <= data_stream_V_data_12_V_dout;
        data_85_V_2_fu_1270 <= data_stream_V_data_13_V_dout;
        data_86_V_2_fu_1274 <= data_stream_V_data_14_V_dout;
        data_87_V_2_fu_1278 <= data_stream_V_data_15_V_dout;
        data_88_V_2_fu_1282 <= data_stream_V_data_16_V_dout;
        data_89_V_2_fu_1286 <= data_stream_V_data_17_V_dout;
        data_90_V_2_fu_1290 <= data_stream_V_data_18_V_dout;
        data_91_V_2_fu_1294 <= data_stream_V_data_19_V_dout;
        data_92_V_2_fu_1298 <= data_stream_V_data_20_V_dout;
        data_93_V_2_fu_1302 <= data_stream_V_data_21_V_dout;
        data_94_V_2_fu_1306 <= data_stream_V_data_22_V_dout;
        data_95_V_2_fu_1310 <= data_stream_V_data_23_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~(sub_ln203_reg_3502 == 7'd24) & ~(sub_ln203_reg_3502 == 7'd0) & ~(sub_ln203_reg_3502 == 7'd48) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_72_V_3_fu_1314 <= data_stream_V_data_0_V_dout;
        data_80_V_3_fu_1346 <= data_stream_V_data_8_V_dout;
        data_81_V_3_fu_1350 <= data_stream_V_data_9_V_dout;
        data_82_V_3_fu_1354 <= data_stream_V_data_10_V_dout;
        data_83_V_3_fu_1358 <= data_stream_V_data_11_V_dout;
        data_84_V_3_fu_1362 <= data_stream_V_data_12_V_dout;
        data_85_V_3_fu_1366 <= data_stream_V_data_13_V_dout;
        data_86_V_3_fu_1370 <= data_stream_V_data_14_V_dout;
        data_87_V_3_fu_1374 <= data_stream_V_data_15_V_dout;
        data_88_V_3_fu_1378 <= data_stream_V_data_16_V_dout;
        data_89_V_3_fu_1382 <= data_stream_V_data_17_V_dout;
        data_90_V_3_fu_1386 <= data_stream_V_data_18_V_dout;
        data_91_V_3_fu_1390 <= data_stream_V_data_19_V_dout;
        data_92_V_3_fu_1394 <= data_stream_V_data_20_V_dout;
        data_93_V_3_fu_1398 <= data_stream_V_data_21_V_dout;
        data_94_V_3_fu_1402 <= data_stream_V_data_22_V_dout;
        data_95_V_3_fu_1406 <= data_stream_V_data_23_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((sub_ln203_reg_3502 == 7'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_72_V_fu_1026 <= data_stream_V_data_0_V_dout;
        data_80_V_fu_1058 <= data_stream_V_data_8_V_dout;
        data_81_V_fu_1062 <= data_stream_V_data_9_V_dout;
        data_82_V_fu_1066 <= data_stream_V_data_10_V_dout;
        data_83_V_fu_1070 <= data_stream_V_data_11_V_dout;
        data_84_V_fu_1074 <= data_stream_V_data_12_V_dout;
        data_85_V_fu_1078 <= data_stream_V_data_13_V_dout;
        data_86_V_fu_1082 <= data_stream_V_data_14_V_dout;
        data_87_V_fu_1086 <= data_stream_V_data_15_V_dout;
        data_88_V_fu_1090 <= data_stream_V_data_16_V_dout;
        data_89_V_fu_1094 <= data_stream_V_data_17_V_dout;
        data_90_V_fu_1098 <= data_stream_V_data_18_V_dout;
        data_91_V_fu_1102 <= data_stream_V_data_19_V_dout;
        data_92_V_fu_1106 <= data_stream_V_data_20_V_dout;
        data_93_V_fu_1110 <= data_stream_V_data_21_V_dout;
        data_94_V_fu_1114 <= data_stream_V_data_22_V_dout;
        data_95_V_fu_1118 <= data_stream_V_data_23_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln203_reg_3506 == 7'd25) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_73_V_1_fu_1126 <= data_stream_V_data_1_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln203_reg_3506 == 7'd49) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_73_V_2_fu_1222 <= data_stream_V_data_1_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~(or_ln203_reg_3506 == 7'd25) & ~(or_ln203_reg_3506 == 7'd1) & ~(or_ln203_reg_3506 == 7'd49) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_73_V_3_fu_1318 <= data_stream_V_data_1_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln203_reg_3506 == 7'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_73_V_fu_1030 <= data_stream_V_data_1_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln203_1_reg_3510 == 7'd26) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_74_V_1_fu_1130 <= data_stream_V_data_2_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln203_1_reg_3510 == 7'd50) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_74_V_2_fu_1226 <= data_stream_V_data_2_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~(or_ln203_1_reg_3510 == 7'd26) & ~(or_ln203_1_reg_3510 == 7'd2) & ~(or_ln203_1_reg_3510 == 7'd50) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_74_V_3_fu_1322 <= data_stream_V_data_2_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln203_1_reg_3510 == 7'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_74_V_fu_1034 <= data_stream_V_data_2_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln203_2_reg_3514 == 7'd27) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_75_V_1_fu_1134 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln203_2_reg_3514 == 7'd51) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_75_V_2_fu_1230 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~(or_ln203_2_reg_3514 == 7'd3) & ~(or_ln203_2_reg_3514 == 7'd51) & ~(or_ln203_2_reg_3514 == 7'd27) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_75_V_3_fu_1326 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln203_2_reg_3514 == 7'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_75_V_fu_1038 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln203_3_reg_3518 == 7'd28) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_76_V_1_fu_1138 <= data_stream_V_data_4_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln203_3_reg_3518 == 7'd52) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_76_V_2_fu_1234 <= data_stream_V_data_4_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~(or_ln203_3_reg_3518 == 7'd4) & ~(or_ln203_3_reg_3518 == 7'd52) & ~(or_ln203_3_reg_3518 == 7'd28) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_76_V_3_fu_1330 <= data_stream_V_data_4_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln203_3_reg_3518 == 7'd4) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_76_V_fu_1042 <= data_stream_V_data_4_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln203_4_reg_3522 == 7'd29) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_77_V_1_fu_1142 <= data_stream_V_data_5_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln203_4_reg_3522 == 7'd53) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_77_V_2_fu_1238 <= data_stream_V_data_5_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~(or_ln203_4_reg_3522 == 7'd5) & ~(or_ln203_4_reg_3522 == 7'd53) & ~(or_ln203_4_reg_3522 == 7'd29) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_77_V_3_fu_1334 <= data_stream_V_data_5_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln203_4_reg_3522 == 7'd5) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_77_V_fu_1046 <= data_stream_V_data_5_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln203_5_reg_3526 == 7'd30) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_78_V_1_fu_1146 <= data_stream_V_data_6_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln203_5_reg_3526 == 7'd54) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_78_V_2_fu_1242 <= data_stream_V_data_6_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~(or_ln203_5_reg_3526 == 7'd6) & ~(or_ln203_5_reg_3526 == 7'd54) & ~(or_ln203_5_reg_3526 == 7'd30) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_78_V_3_fu_1338 <= data_stream_V_data_6_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln203_5_reg_3526 == 7'd6) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_78_V_fu_1050 <= data_stream_V_data_6_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln203_6_reg_3530 == 7'd31) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_79_V_1_fu_1150 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln203_6_reg_3530 == 7'd55) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_79_V_2_fu_1246 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~(or_ln203_6_reg_3530 == 7'd7) & ~(or_ln203_6_reg_3530 == 7'd55) & ~(or_ln203_6_reg_3530 == 7'd31) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_79_V_3_fu_1342 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln203_6_reg_3530 == 7'd7) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_79_V_fu_1054 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_fu_1705_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln203_1_reg_3510[6 : 3] <= or_ln203_1_fu_1753_p2[6 : 3];
        or_ln203_2_reg_3514[6 : 3] <= or_ln203_2_fu_1759_p2[6 : 3];
        or_ln203_3_reg_3518[6 : 3] <= or_ln203_3_fu_1765_p2[6 : 3];
        or_ln203_4_reg_3522[6 : 3] <= or_ln203_4_fu_1771_p2[6 : 3];
        or_ln203_5_reg_3526[6 : 3] <= or_ln203_5_fu_1777_p2[6 : 3];
        or_ln203_6_reg_3530[6 : 3] <= or_ln203_6_fu_1783_p2[6 : 3];
        or_ln203_reg_3506[6 : 3] <= or_ln203_fu_1747_p2[6 : 3];
        sub_ln203_reg_3502[6 : 3] <= sub_ln203_fu_1741_p2[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_data_0_V_reg_4014 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_0;
        tmp_data_10_V_reg_4064 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_10;
        tmp_data_11_V_reg_4069 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_11;
        tmp_data_12_V_reg_4074 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_12;
        tmp_data_13_V_reg_4079 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_13;
        tmp_data_14_V_reg_4084 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_14;
        tmp_data_15_V_reg_4089 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_15;
        tmp_data_16_V_reg_4094 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_16;
        tmp_data_17_V_reg_4099 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_17;
        tmp_data_18_V_reg_4104 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_18;
        tmp_data_19_V_reg_4109 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_19;
        tmp_data_1_V_reg_4019 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_1;
        tmp_data_20_V_reg_4114 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_20;
        tmp_data_21_V_reg_4119 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_21;
        tmp_data_22_V_reg_4124 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_22;
        tmp_data_23_V_reg_4129 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_23;
        tmp_data_24_V_reg_4134 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_24;
        tmp_data_25_V_reg_4139 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_25;
        tmp_data_26_V_reg_4144 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_26;
        tmp_data_27_V_reg_4149 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_27;
        tmp_data_28_V_reg_4154 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_28;
        tmp_data_29_V_reg_4159 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_29;
        tmp_data_2_V_reg_4024 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_2;
        tmp_data_30_V_reg_4164 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_30;
        tmp_data_31_V_reg_4169 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_31;
        tmp_data_32_V_reg_4174 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_32;
        tmp_data_33_V_reg_4179 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_33;
        tmp_data_34_V_reg_4184 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_34;
        tmp_data_35_V_reg_4189 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_35;
        tmp_data_36_V_reg_4194 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_36;
        tmp_data_37_V_reg_4199 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_37;
        tmp_data_38_V_reg_4204 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_38;
        tmp_data_39_V_reg_4209 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_39;
        tmp_data_3_V_reg_4029 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_3;
        tmp_data_40_V_reg_4214 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_40;
        tmp_data_41_V_reg_4219 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_41;
        tmp_data_4_V_reg_4034 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_4;
        tmp_data_5_V_reg_4039 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_5;
        tmp_data_6_V_reg_4044 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_6;
        tmp_data_7_V_reg_4049 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_7;
        tmp_data_8_V_reg_4054 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_8;
        tmp_data_9_V_reg_4059 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_return_9;
    end
end

always @ (*) begin
    if ((icmp_ln41_fu_1705_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_0_V_blk_n = data_stream_V_data_0_V_empty_n;
    end else begin
        data_stream_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_0_V_read = 1'b1;
    end else begin
        data_stream_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_10_V_blk_n = data_stream_V_data_10_V_empty_n;
    end else begin
        data_stream_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_10_V_read = 1'b1;
    end else begin
        data_stream_V_data_10_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_11_V_blk_n = data_stream_V_data_11_V_empty_n;
    end else begin
        data_stream_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_11_V_read = 1'b1;
    end else begin
        data_stream_V_data_11_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_12_V_blk_n = data_stream_V_data_12_V_empty_n;
    end else begin
        data_stream_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_12_V_read = 1'b1;
    end else begin
        data_stream_V_data_12_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_13_V_blk_n = data_stream_V_data_13_V_empty_n;
    end else begin
        data_stream_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_13_V_read = 1'b1;
    end else begin
        data_stream_V_data_13_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_14_V_blk_n = data_stream_V_data_14_V_empty_n;
    end else begin
        data_stream_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_14_V_read = 1'b1;
    end else begin
        data_stream_V_data_14_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_15_V_blk_n = data_stream_V_data_15_V_empty_n;
    end else begin
        data_stream_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_15_V_read = 1'b1;
    end else begin
        data_stream_V_data_15_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_16_V_blk_n = data_stream_V_data_16_V_empty_n;
    end else begin
        data_stream_V_data_16_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_16_V_read = 1'b1;
    end else begin
        data_stream_V_data_16_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_17_V_blk_n = data_stream_V_data_17_V_empty_n;
    end else begin
        data_stream_V_data_17_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_17_V_read = 1'b1;
    end else begin
        data_stream_V_data_17_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_18_V_blk_n = data_stream_V_data_18_V_empty_n;
    end else begin
        data_stream_V_data_18_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_18_V_read = 1'b1;
    end else begin
        data_stream_V_data_18_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_19_V_blk_n = data_stream_V_data_19_V_empty_n;
    end else begin
        data_stream_V_data_19_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_19_V_read = 1'b1;
    end else begin
        data_stream_V_data_19_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_1_V_blk_n = data_stream_V_data_1_V_empty_n;
    end else begin
        data_stream_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_1_V_read = 1'b1;
    end else begin
        data_stream_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_20_V_blk_n = data_stream_V_data_20_V_empty_n;
    end else begin
        data_stream_V_data_20_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_20_V_read = 1'b1;
    end else begin
        data_stream_V_data_20_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_21_V_blk_n = data_stream_V_data_21_V_empty_n;
    end else begin
        data_stream_V_data_21_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_21_V_read = 1'b1;
    end else begin
        data_stream_V_data_21_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_22_V_blk_n = data_stream_V_data_22_V_empty_n;
    end else begin
        data_stream_V_data_22_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_22_V_read = 1'b1;
    end else begin
        data_stream_V_data_22_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_23_V_blk_n = data_stream_V_data_23_V_empty_n;
    end else begin
        data_stream_V_data_23_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_23_V_read = 1'b1;
    end else begin
        data_stream_V_data_23_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_2_V_blk_n = data_stream_V_data_2_V_empty_n;
    end else begin
        data_stream_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_2_V_read = 1'b1;
    end else begin
        data_stream_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_3_V_blk_n = data_stream_V_data_3_V_empty_n;
    end else begin
        data_stream_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_3_V_read = 1'b1;
    end else begin
        data_stream_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_4_V_blk_n = data_stream_V_data_4_V_empty_n;
    end else begin
        data_stream_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_4_V_read = 1'b1;
    end else begin
        data_stream_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_5_V_blk_n = data_stream_V_data_5_V_empty_n;
    end else begin
        data_stream_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_5_V_read = 1'b1;
    end else begin
        data_stream_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_6_V_blk_n = data_stream_V_data_6_V_empty_n;
    end else begin
        data_stream_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_6_V_read = 1'b1;
    end else begin
        data_stream_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_7_V_blk_n = data_stream_V_data_7_V_empty_n;
    end else begin
        data_stream_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_7_V_read = 1'b1;
    end else begin
        data_stream_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_8_V_blk_n = data_stream_V_data_8_V_empty_n;
    end else begin
        data_stream_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_8_V_read = 1'b1;
    end else begin
        data_stream_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_9_V_blk_n = data_stream_V_data_9_V_empty_n;
    end else begin
        data_stream_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_9_V_read = 1'b1;
    end else begin
        data_stream_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_0_V_blk_n = res_stream_V_data_0_V_full_n;
    end else begin
        res_stream_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_0_V_write = 1'b1;
    end else begin
        res_stream_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_10_V_blk_n = res_stream_V_data_10_V_full_n;
    end else begin
        res_stream_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_10_V_write = 1'b1;
    end else begin
        res_stream_V_data_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_11_V_blk_n = res_stream_V_data_11_V_full_n;
    end else begin
        res_stream_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_11_V_write = 1'b1;
    end else begin
        res_stream_V_data_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_12_V_blk_n = res_stream_V_data_12_V_full_n;
    end else begin
        res_stream_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_12_V_write = 1'b1;
    end else begin
        res_stream_V_data_12_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_13_V_blk_n = res_stream_V_data_13_V_full_n;
    end else begin
        res_stream_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_13_V_write = 1'b1;
    end else begin
        res_stream_V_data_13_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_14_V_blk_n = res_stream_V_data_14_V_full_n;
    end else begin
        res_stream_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_14_V_write = 1'b1;
    end else begin
        res_stream_V_data_14_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_15_V_blk_n = res_stream_V_data_15_V_full_n;
    end else begin
        res_stream_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_15_V_write = 1'b1;
    end else begin
        res_stream_V_data_15_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_16_V_blk_n = res_stream_V_data_16_V_full_n;
    end else begin
        res_stream_V_data_16_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_16_V_write = 1'b1;
    end else begin
        res_stream_V_data_16_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_17_V_blk_n = res_stream_V_data_17_V_full_n;
    end else begin
        res_stream_V_data_17_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_17_V_write = 1'b1;
    end else begin
        res_stream_V_data_17_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_18_V_blk_n = res_stream_V_data_18_V_full_n;
    end else begin
        res_stream_V_data_18_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_18_V_write = 1'b1;
    end else begin
        res_stream_V_data_18_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_19_V_blk_n = res_stream_V_data_19_V_full_n;
    end else begin
        res_stream_V_data_19_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_19_V_write = 1'b1;
    end else begin
        res_stream_V_data_19_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_1_V_blk_n = res_stream_V_data_1_V_full_n;
    end else begin
        res_stream_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_1_V_write = 1'b1;
    end else begin
        res_stream_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_20_V_blk_n = res_stream_V_data_20_V_full_n;
    end else begin
        res_stream_V_data_20_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_20_V_write = 1'b1;
    end else begin
        res_stream_V_data_20_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_21_V_blk_n = res_stream_V_data_21_V_full_n;
    end else begin
        res_stream_V_data_21_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_21_V_write = 1'b1;
    end else begin
        res_stream_V_data_21_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_22_V_blk_n = res_stream_V_data_22_V_full_n;
    end else begin
        res_stream_V_data_22_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_22_V_write = 1'b1;
    end else begin
        res_stream_V_data_22_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_23_V_blk_n = res_stream_V_data_23_V_full_n;
    end else begin
        res_stream_V_data_23_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_23_V_write = 1'b1;
    end else begin
        res_stream_V_data_23_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_24_V_blk_n = res_stream_V_data_24_V_full_n;
    end else begin
        res_stream_V_data_24_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_24_V_write = 1'b1;
    end else begin
        res_stream_V_data_24_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_25_V_blk_n = res_stream_V_data_25_V_full_n;
    end else begin
        res_stream_V_data_25_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_25_V_write = 1'b1;
    end else begin
        res_stream_V_data_25_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_26_V_blk_n = res_stream_V_data_26_V_full_n;
    end else begin
        res_stream_V_data_26_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_26_V_write = 1'b1;
    end else begin
        res_stream_V_data_26_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_27_V_blk_n = res_stream_V_data_27_V_full_n;
    end else begin
        res_stream_V_data_27_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_27_V_write = 1'b1;
    end else begin
        res_stream_V_data_27_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_28_V_blk_n = res_stream_V_data_28_V_full_n;
    end else begin
        res_stream_V_data_28_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_28_V_write = 1'b1;
    end else begin
        res_stream_V_data_28_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_29_V_blk_n = res_stream_V_data_29_V_full_n;
    end else begin
        res_stream_V_data_29_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_29_V_write = 1'b1;
    end else begin
        res_stream_V_data_29_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_2_V_blk_n = res_stream_V_data_2_V_full_n;
    end else begin
        res_stream_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_2_V_write = 1'b1;
    end else begin
        res_stream_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_30_V_blk_n = res_stream_V_data_30_V_full_n;
    end else begin
        res_stream_V_data_30_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_30_V_write = 1'b1;
    end else begin
        res_stream_V_data_30_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_31_V_blk_n = res_stream_V_data_31_V_full_n;
    end else begin
        res_stream_V_data_31_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_31_V_write = 1'b1;
    end else begin
        res_stream_V_data_31_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_32_V_blk_n = res_stream_V_data_32_V_full_n;
    end else begin
        res_stream_V_data_32_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_32_V_write = 1'b1;
    end else begin
        res_stream_V_data_32_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_33_V_blk_n = res_stream_V_data_33_V_full_n;
    end else begin
        res_stream_V_data_33_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_33_V_write = 1'b1;
    end else begin
        res_stream_V_data_33_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_34_V_blk_n = res_stream_V_data_34_V_full_n;
    end else begin
        res_stream_V_data_34_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_34_V_write = 1'b1;
    end else begin
        res_stream_V_data_34_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_35_V_blk_n = res_stream_V_data_35_V_full_n;
    end else begin
        res_stream_V_data_35_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_35_V_write = 1'b1;
    end else begin
        res_stream_V_data_35_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_36_V_blk_n = res_stream_V_data_36_V_full_n;
    end else begin
        res_stream_V_data_36_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_36_V_write = 1'b1;
    end else begin
        res_stream_V_data_36_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_37_V_blk_n = res_stream_V_data_37_V_full_n;
    end else begin
        res_stream_V_data_37_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_37_V_write = 1'b1;
    end else begin
        res_stream_V_data_37_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_38_V_blk_n = res_stream_V_data_38_V_full_n;
    end else begin
        res_stream_V_data_38_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_38_V_write = 1'b1;
    end else begin
        res_stream_V_data_38_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_39_V_blk_n = res_stream_V_data_39_V_full_n;
    end else begin
        res_stream_V_data_39_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_39_V_write = 1'b1;
    end else begin
        res_stream_V_data_39_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_3_V_blk_n = res_stream_V_data_3_V_full_n;
    end else begin
        res_stream_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_3_V_write = 1'b1;
    end else begin
        res_stream_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_40_V_blk_n = res_stream_V_data_40_V_full_n;
    end else begin
        res_stream_V_data_40_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_40_V_write = 1'b1;
    end else begin
        res_stream_V_data_40_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_41_V_blk_n = res_stream_V_data_41_V_full_n;
    end else begin
        res_stream_V_data_41_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_41_V_write = 1'b1;
    end else begin
        res_stream_V_data_41_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_4_V_blk_n = res_stream_V_data_4_V_full_n;
    end else begin
        res_stream_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_4_V_write = 1'b1;
    end else begin
        res_stream_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_5_V_blk_n = res_stream_V_data_5_V_full_n;
    end else begin
        res_stream_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_5_V_write = 1'b1;
    end else begin
        res_stream_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_6_V_blk_n = res_stream_V_data_6_V_full_n;
    end else begin
        res_stream_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_6_V_write = 1'b1;
    end else begin
        res_stream_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_7_V_blk_n = res_stream_V_data_7_V_full_n;
    end else begin
        res_stream_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_7_V_write = 1'b1;
    end else begin
        res_stream_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_8_V_blk_n = res_stream_V_data_8_V_full_n;
    end else begin
        res_stream_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_8_V_write = 1'b1;
    end else begin
        res_stream_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_9_V_blk_n = res_stream_V_data_9_V_full_n;
    end else begin
        res_stream_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
        res_stream_V_data_9_V_write = 1'b1;
    end else begin
        res_stream_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln41_fu_1705_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln41_fu_1705_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op574 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((io_acc_block_signal_op216 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((io_acc_block_signal_op216 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (io_acc_block_signal_op216 == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_start = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config18_s_fu_1603_ap_start_reg;

assign i_in_fu_1711_p2 = (i_in_0_reg_1592 + 3'd1);

assign icmp_ln41_fu_1705_p2 = ((i_in_0_reg_1592 == 3'd4) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op216 = (data_stream_V_data_9_V_empty_n & data_stream_V_data_8_V_empty_n & data_stream_V_data_7_V_empty_n & data_stream_V_data_6_V_empty_n & data_stream_V_data_5_V_empty_n & data_stream_V_data_4_V_empty_n & data_stream_V_data_3_V_empty_n & data_stream_V_data_2_V_empty_n & data_stream_V_data_23_V_empty_n & data_stream_V_data_22_V_empty_n & data_stream_V_data_21_V_empty_n & data_stream_V_data_20_V_empty_n & data_stream_V_data_1_V_empty_n & data_stream_V_data_19_V_empty_n & data_stream_V_data_18_V_empty_n & data_stream_V_data_17_V_empty_n & data_stream_V_data_16_V_empty_n & data_stream_V_data_15_V_empty_n & data_stream_V_data_14_V_empty_n & data_stream_V_data_13_V_empty_n & data_stream_V_data_12_V_empty_n & data_stream_V_data_11_V_empty_n & data_stream_V_data_10_V_empty_n & data_stream_V_data_0_V_empty_n);

assign io_acc_block_signal_op574 = (res_stream_V_data_9_V_full_n & res_stream_V_data_8_V_full_n & res_stream_V_data_7_V_full_n & res_stream_V_data_6_V_full_n & res_stream_V_data_5_V_full_n & res_stream_V_data_4_V_full_n & res_stream_V_data_41_V_full_n & res_stream_V_data_40_V_full_n & res_stream_V_data_3_V_full_n & res_stream_V_data_39_V_full_n & res_stream_V_data_38_V_full_n & res_stream_V_data_37_V_full_n & res_stream_V_data_36_V_full_n & res_stream_V_data_35_V_full_n & res_stream_V_data_34_V_full_n & res_stream_V_data_33_V_full_n & res_stream_V_data_32_V_full_n & res_stream_V_data_31_V_full_n & res_stream_V_data_30_V_full_n & res_stream_V_data_2_V_full_n & res_stream_V_data_29_V_full_n & res_stream_V_data_28_V_full_n & res_stream_V_data_27_V_full_n & res_stream_V_data_26_V_full_n & res_stream_V_data_25_V_full_n & res_stream_V_data_24_V_full_n & res_stream_V_data_23_V_full_n & res_stream_V_data_22_V_full_n & res_stream_V_data_21_V_full_n & res_stream_V_data_20_V_full_n & res_stream_V_data_1_V_full_n & res_stream_V_data_19_V_full_n & res_stream_V_data_18_V_full_n & res_stream_V_data_17_V_full_n & res_stream_V_data_16_V_full_n & res_stream_V_data_15_V_full_n & res_stream_V_data_14_V_full_n & res_stream_V_data_13_V_full_n & res_stream_V_data_12_V_full_n & res_stream_V_data_11_V_full_n & res_stream_V_data_10_V_full_n & res_stream_V_data_0_V_full_n);

assign or_ln203_1_fu_1753_p2 = (sub_ln203_fu_1741_p2 | 7'd2);

assign or_ln203_2_fu_1759_p2 = (sub_ln203_fu_1741_p2 | 7'd3);

assign or_ln203_3_fu_1765_p2 = (sub_ln203_fu_1741_p2 | 7'd4);

assign or_ln203_4_fu_1771_p2 = (sub_ln203_fu_1741_p2 | 7'd5);

assign or_ln203_5_fu_1777_p2 = (sub_ln203_fu_1741_p2 | 7'd6);

assign or_ln203_6_fu_1783_p2 = (sub_ln203_fu_1741_p2 | 7'd7);

assign or_ln203_fu_1747_p2 = (sub_ln203_fu_1741_p2 | 7'd1);

assign res_stream_V_data_0_V_din = tmp_data_0_V_reg_4014;

assign res_stream_V_data_10_V_din = tmp_data_10_V_reg_4064;

assign res_stream_V_data_11_V_din = tmp_data_11_V_reg_4069;

assign res_stream_V_data_12_V_din = tmp_data_12_V_reg_4074;

assign res_stream_V_data_13_V_din = tmp_data_13_V_reg_4079;

assign res_stream_V_data_14_V_din = tmp_data_14_V_reg_4084;

assign res_stream_V_data_15_V_din = tmp_data_15_V_reg_4089;

assign res_stream_V_data_16_V_din = tmp_data_16_V_reg_4094;

assign res_stream_V_data_17_V_din = tmp_data_17_V_reg_4099;

assign res_stream_V_data_18_V_din = tmp_data_18_V_reg_4104;

assign res_stream_V_data_19_V_din = tmp_data_19_V_reg_4109;

assign res_stream_V_data_1_V_din = tmp_data_1_V_reg_4019;

assign res_stream_V_data_20_V_din = tmp_data_20_V_reg_4114;

assign res_stream_V_data_21_V_din = tmp_data_21_V_reg_4119;

assign res_stream_V_data_22_V_din = tmp_data_22_V_reg_4124;

assign res_stream_V_data_23_V_din = tmp_data_23_V_reg_4129;

assign res_stream_V_data_24_V_din = tmp_data_24_V_reg_4134;

assign res_stream_V_data_25_V_din = tmp_data_25_V_reg_4139;

assign res_stream_V_data_26_V_din = tmp_data_26_V_reg_4144;

assign res_stream_V_data_27_V_din = tmp_data_27_V_reg_4149;

assign res_stream_V_data_28_V_din = tmp_data_28_V_reg_4154;

assign res_stream_V_data_29_V_din = tmp_data_29_V_reg_4159;

assign res_stream_V_data_2_V_din = tmp_data_2_V_reg_4024;

assign res_stream_V_data_30_V_din = tmp_data_30_V_reg_4164;

assign res_stream_V_data_31_V_din = tmp_data_31_V_reg_4169;

assign res_stream_V_data_32_V_din = tmp_data_32_V_reg_4174;

assign res_stream_V_data_33_V_din = tmp_data_33_V_reg_4179;

assign res_stream_V_data_34_V_din = tmp_data_34_V_reg_4184;

assign res_stream_V_data_35_V_din = tmp_data_35_V_reg_4189;

assign res_stream_V_data_36_V_din = tmp_data_36_V_reg_4194;

assign res_stream_V_data_37_V_din = tmp_data_37_V_reg_4199;

assign res_stream_V_data_38_V_din = tmp_data_38_V_reg_4204;

assign res_stream_V_data_39_V_din = tmp_data_39_V_reg_4209;

assign res_stream_V_data_3_V_din = tmp_data_3_V_reg_4029;

assign res_stream_V_data_40_V_din = tmp_data_40_V_reg_4214;

assign res_stream_V_data_41_V_din = tmp_data_41_V_reg_4219;

assign res_stream_V_data_4_V_din = tmp_data_4_V_reg_4034;

assign res_stream_V_data_5_V_din = tmp_data_5_V_reg_4039;

assign res_stream_V_data_6_V_din = tmp_data_6_V_reg_4044;

assign res_stream_V_data_7_V_din = tmp_data_7_V_reg_4049;

assign res_stream_V_data_8_V_din = tmp_data_8_V_reg_4054;

assign res_stream_V_data_9_V_din = tmp_data_9_V_reg_4059;

assign shl_ln48_1_fu_1729_p3 = {{trunc_ln48_fu_1717_p1}, {3'd0}};

assign shl_ln_fu_1721_p3 = {{trunc_ln48_fu_1717_p1}, {5'd0}};

assign start_out = real_start;

assign sub_ln203_fu_1741_p2 = (shl_ln_fu_1721_p3 - zext_ln203_fu_1737_p1);

assign trunc_ln48_fu_1717_p1 = i_in_0_reg_1592[1:0];

assign zext_ln203_fu_1737_p1 = shl_ln48_1_fu_1729_p3;

always @ (posedge ap_clk) begin
    sub_ln203_reg_3502[2:0] <= 3'b000;
    or_ln203_reg_3506[2:0] <= 3'b001;
    or_ln203_1_reg_3510[2:0] <= 3'b010;
    or_ln203_2_reg_3514[2:0] <= 3'b011;
    or_ln203_3_reg_3518[2:0] <= 3'b100;
    or_ln203_4_reg_3522[2:0] <= 3'b101;
    or_ln203_5_reg_3526[2:0] <= 3'b110;
    or_ln203_6_reg_3530[2:0] <= 3'b111;
end

endmodule //dense_array_array_ap_fixed_16_6_5_3_0_42u_config18_s
